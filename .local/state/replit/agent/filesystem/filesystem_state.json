{"file_contents":{"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/Timeline.tsx":{"content":"import { formatIST } from \"../utils/time\";\nimport type { HistoryItem } from \"../types\";\n\ninterface TimelineProps {\n  history: HistoryItem[];\n  limit?: number;\n}\n\nconst eventIcons = {\n  SOS_NEW: \"fas fa-exclamation-triangle\",\n  AMB_ACK: \"fas fa-check\",\n  AMB_ENROUTE: \"fas fa-route\",\n  AMB_ARRIVED: \"fas fa-map-marker-alt\",\n  HOSP_PREP: \"fas fa-hospital\",\n};\n\nconst eventColors = {\n  SOS_NEW: \"bg-red-100 text-red-600\",\n  AMB_ACK: \"bg-amber-100 text-amber-600\",\n  AMB_ENROUTE: \"bg-sky-100 text-sky-600\",\n  AMB_ARRIVED: \"bg-green-100 text-green-600\",\n  HOSP_PREP: \"bg-purple-100 text-purple-600\",\n};\n\nconst eventTitles = {\n  SOS_NEW: \"Emergency Alert Sent\",\n  AMB_ACK: \"Emergency Acknowledged\",\n  AMB_ENROUTE: \"Ambulance En Route\",\n  AMB_ARRIVED: \"Ambulance Arrived\",\n  HOSP_PREP: \"Hospital Prep Started\",\n};\n\nexport function Timeline({ history, limit }: TimelineProps) {\n  const items = limit ? history.slice(-limit) : history;\n\n  if (items.length === 0) {\n    return (\n      <div className=\"text-center text-muted-foreground text-sm py-8\">\n        <i className=\"fas fa-clock mr-1\"></i>\n        No activity yet\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"timeline\">\n      {items.map((item, index) => (\n        <div \n          key={`${item.ts}-${index}`} \n          className=\"timeline-item relative pl-10 pb-4 last:pb-0\"\n          data-testid={`timeline-item-${item.type.toLowerCase()}`}\n        >\n          <div className={`absolute left-0 top-1 w-8 h-8 rounded-full flex items-center justify-center ${eventColors[item.type]}`}>\n            <i className={`${eventIcons[item.type]} text-sm`}></i>\n          </div>\n          <div>\n            <p className=\"font-medium text-foreground\" data-testid={`timeline-title-${index}`}>\n              {eventTitles[item.type]}\n            </p>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`timeline-time-${index}`}>\n              {formatIST(item.ts)} - {item.note || \"\"}\n            </p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2046},"server/repo/types.ts":{"content":"export interface Profile {\n  id: string;\n  role: 'patient' | 'driver' | 'hospital' | 'admin';\n  name?: string;\n  phone?: string;\n  created_at?: Date;\n}\n\nexport interface Hospital {\n  id: string;\n  name: string;\n  lat: number;\n  lon: number;\n  beds_available: number;\n  doctors_available: number;\n  capabilities: string[];\n  accepting_emergencies: boolean;\n  created_at?: Date;\n}\n\nexport interface NewEmergency {\n  patient_id: string;\n  lat: number;\n  lon: number;\n  type: string;\n  needs: string[];\n  triage_score: number;\n  vitals?: {\n    hr?: number; // heart rate\n    spo2?: number; // oxygen saturation\n    sbp?: number; // systolic blood pressure\n    rr?: number; // respiratory rate\n    gcs?: number; // glasgow coma scale\n  };\n}\n\nexport interface Emergency {\n  id: string;\n  patient_id: string;\n  lat: number;\n  lon: number;\n  type: string;\n  needs: string[];\n  triage_score: number;\n  status: 'active' | 'assigned' | 'enroute' | 'arrived' | 'completed' | 'cancelled';\n  assigned_hospital_id?: string;\n  rerouted_to_id?: string;\n  assigned_eta_min?: number;\n  duplicate_of?: string;\n  vitals?: {\n    hr?: number;\n    spo2?: number;\n    sbp?: number;\n    rr?: number;\n    gcs?: number;\n  };\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface IncidentEvent {\n  id: string;\n  emergency_id: string;\n  kind: 'created' | 'triage' | 'assigned' | 'reroute' | 'enroute' | 'arrived' | 'completed' | 'notified' | 'note';\n  data: Record<string, any>;\n  ts: Date;\n}\n\nexport interface AmbulancePosition {\n  id?: string;\n  ambulance_id: string;\n  lat: number;\n  lon: number;\n  ts: Date;\n}\n\nexport interface EmergencyFilter {\n  status?: string[];\n  triage_level?: string[];\n  needs?: string[];\n}","size_bytes":1695},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/store/multi-emergency-store.ts":{"content":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport type { Patient, GeoLocation } from \"../types\";\nimport { demoPatient } from \"../types\";\nimport { nowISO } from \"../utils/time\";\nimport { safeNotify } from \"../utils/notify\";\n\n// Enhanced emergency state for multiple emergencies\nexport interface EnhancedEmergency {\n  id: string;\n  patientId: string;\n  patient: Patient;\n  type: string;\n  status: 'active' | 'assigned' | 'enroute' | 'arrived' | 'completed' | 'cancelled';\n  needs: string[];\n  triageScore: number;\n  triageLevel: 'red' | 'yellow' | 'green';\n  location: GeoLocation;\n  vitals?: {\n    hr?: number;\n    spo2?: number; \n    sbp?: number;\n    rr?: number;\n    gcs?: number;\n  };\n  assignedHospital?: {\n    id: string;\n    name: string;\n    eta: number;\n  };\n  timeline: EmergencyEvent[];\n  createdAt: string;\n  updatedAt: string;\n  duplicateOf?: string;\n}\n\nexport interface EmergencyEvent {\n  id: string;\n  ts: string;\n  actor: 'USER' | 'AMBULANCE' | 'HOSPITAL' | 'SYSTEM';\n  type: 'created' | 'assigned' | 'acknowledged' | 'enroute' | 'arrived' | 'completed' | 'rerouted' | 'note';\n  message: string;\n  data?: Record<string, any>;\n}\n\ninterface MultiEmergencyStore {\n  // State\n  emergencies: Map<string, EnhancedEmergency>;\n  activeEmergencyId: string | null;\n  \n  // Actions\n  createEmergency: (data: CreateEmergencyData) => Promise<string>;\n  updateEmergency: (id: string, updates: Partial<EnhancedEmergency>) => void;\n  addTimelineEvent: (emergencyId: string, event: Omit<EmergencyEvent, 'id'>) => void;\n  setActiveEmergency: (id: string | null) => void;\n  \n  // Ambulance actions\n  acknowledgeEmergency: (id: string) => void;\n  startEnroute: (id: string) => void;\n  markArrived: (id: string) => void;\n  \n  // Hospital actions\n  startPreparation: (id: string) => void;\n  completeEmergency: (id: string) => void;\n  \n  // Utility\n  getActiveEmergency: () => EnhancedEmergency | null;\n  getEmergencyById: (id: string) => EnhancedEmergency | null;\n  getAllEmergencies: () => EnhancedEmergency[];\n  getEmergenciesByStatus: (status: string[]) => EnhancedEmergency[];\n  checkForDuplicate: (patientId: string, location: GeoLocation) => string | null;\n  clearAllEmergencies: () => void;\n}\n\nexport interface CreateEmergencyData {\n  patientId?: string;\n  patient?: Patient;\n  type: string;\n  location: GeoLocation;\n  vitals?: {\n    hr?: number;\n    spo2?: number;\n    sbp?: number;\n    rr?: number;\n    gcs?: number;\n  };\n  needs?: string[];\n}\n\n// Helper to calculate triage score (simplified version)\nfunction calculateTriageScore(vitals: any, emergencyType: string): { score: number; level: 'red' | 'yellow' | 'green'; needs: string[] } {\n  let score = 0;\n  const needs: string[] = [];\n\n  // Vitals scoring\n  if (vitals?.hr) {\n    if (vitals.hr > 120 || vitals.hr < 50) score += 15;\n    if (vitals.hr > 140 || vitals.hr < 40) score += 25;\n  }\n\n  if (vitals?.spo2) {\n    if (vitals.spo2 < 92) score += 20;\n    if (vitals.spo2 < 85) score += 30;\n  }\n\n  if (vitals?.gcs && vitals.gcs < 13) {\n    score += 20;\n    needs.push('Neuro');\n  }\n\n  // Emergency type scoring\n  const type = emergencyType.toLowerCase();\n  if (type.includes('cardiac') || type.includes('heart')) {\n    score += 25;\n    needs.push('Cardio', 'ICU');\n  }\n  if (type.includes('trauma') || type.includes('accident')) {\n    score += 20;\n    needs.push('ICU');\n  }\n  if (type.includes('respiratory') || type.includes('breathing')) {\n    score += 15;\n    needs.push('Ventilator');\n  }\n\n  // Determine level\n  let level: 'red' | 'yellow' | 'green' = 'green';\n  if (score >= 70) level = 'red';\n  else if (score >= 30) level = 'yellow';\n\n  return { score: Math.min(score, 100), level, needs };\n}\n\n// Helper to calculate distance between two points\nfunction calculateDistance(loc1: GeoLocation, loc2: GeoLocation): number {\n  if (!loc1.lat || !loc1.lon || !loc2.lat || !loc2.lon) return Infinity;\n  \n  const R = 6371; // Earth's radius in km\n  const dLat = (loc2.lat - loc1.lat) * Math.PI / 180;\n  const dLon = (loc2.lon - loc1.lon) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(loc1.lat * Math.PI / 180) * Math.cos(loc2.lat * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c; // Distance in km\n}\n\n// Helper functions for Map serialization\nconst serializeEmergencies = (emergencies: Map<string, EnhancedEmergency>) => {\n  return Array.from(emergencies.entries());\n};\n\nconst deserializeEmergencies = (data: any): Map<string, EnhancedEmergency> => {\n  if (!data) return new Map();\n  if (Array.isArray(data)) {\n    return new Map(data);\n  }\n  if (typeof data === 'object') {\n    return new Map(Object.entries(data));\n  }\n  return new Map();\n};\n\nexport const useMultiEmergencyStore = create<MultiEmergencyStore>()(\n  persist(\n    (set, get) => ({\n      emergencies: new Map(),\n      activeEmergencyId: null,\n\n      createEmergency: async (data: CreateEmergencyData): Promise<string> => {\n        const now = nowISO();\n        const patientId = data.patientId || `patient-${Date.now()}`;\n        const patient = data.patient || { ...demoPatient, id: patientId };\n        \n        // Check for duplicates (same patient within 5 minutes and 100m)\n        const duplicateId = get().checkForDuplicate(patientId, data.location);\n        \n        const triage = calculateTriageScore(data.vitals || {}, data.type);\n        \n        const emergency: EnhancedEmergency = {\n          id: `emr-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          patientId,\n          patient,\n          type: data.type,\n          status: 'active',\n          needs: data.needs || triage.needs,\n          triageScore: triage.score,\n          triageLevel: triage.level,\n          location: data.location,\n          vitals: data.vitals,\n          timeline: [{\n            id: `evt-${Date.now()}`,\n            ts: now,\n            actor: 'USER',\n            type: 'created',\n            message: `Emergency created: ${data.type}`,\n            data: { \n              triage_score: triage.score,\n              triage_level: triage.level,\n              needs: triage.needs,\n              duplicate_of: duplicateId\n            }\n          }],\n          createdAt: now,\n          updatedAt: now,\n          duplicateOf: duplicateId || undefined\n        };\n\n        // Send to backend if available\n        try {\n          const response = await fetch('/api/emergencies', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              enhanced: true,\n              patient_id: patientId,\n              lat: data.location.lat,\n              lon: data.location.lon,\n              type: data.type,\n              vitals: data.vitals,\n              // Legacy fields for compatibility\n              patientId,\n              status: 'active',\n              history: emergency.timeline.map(t => ({\n                ts: t.ts,\n                actor: t.actor,\n                type: 'SOS_NEW',\n                note: t.message\n              })),\n              location: data.location\n            })\n          });\n          \n          if (response.ok) {\n            const result = await response.json();\n            console.log('Emergency created on server:', result);\n          }\n        } catch (error) {\n          console.warn('Failed to sync with server:', error);\n        }\n\n        set(state => ({\n          emergencies: new Map(state.emergencies).set(emergency.id, emergency),\n          activeEmergencyId: emergency.id\n        }));\n\n        // Broadcast to other tabs\n        window.dispatchEvent(new CustomEvent('emergency-created', { \n          detail: { emergency } \n        }));\n\n        safeNotify(\n          duplicateId ? \"Duplicate Emergency Detected\" : \"Emergency Alert Created\",\n          duplicateId \n            ? `Similar emergency exists. Created anyway with triage level: ${triage.level.toUpperCase()}`\n            : `Triage level: ${triage.level.toUpperCase()} (Score: ${triage.score})`\n        );\n\n        return emergency.id;\n      },\n\n      updateEmergency: (id: string, updates: Partial<EnhancedEmergency>) => {\n        set(state => {\n          const emergency = state.emergencies.get(id);\n          if (!emergency) return state;\n          \n          const updated = { ...emergency, ...updates, updatedAt: nowISO() };\n          const newEmergencies = new Map(state.emergencies);\n          newEmergencies.set(id, updated);\n          \n          return { emergencies: newEmergencies };\n        });\n      },\n\n      addTimelineEvent: (emergencyId: string, event: Omit<EmergencyEvent, 'id'>) => {\n        set(state => {\n          const emergency = state.emergencies.get(emergencyId);\n          if (!emergency) return state;\n          \n          const newEvent: EmergencyEvent = {\n            ...event,\n            id: `evt-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`\n          };\n          \n          const updated = {\n            ...emergency,\n            timeline: [...emergency.timeline, newEvent],\n            updatedAt: nowISO()\n          };\n          \n          const newEmergencies = new Map(state.emergencies);\n          newEmergencies.set(emergencyId, updated);\n          \n          return { emergencies: newEmergencies };\n        });\n      },\n\n      setActiveEmergency: (id: string | null) => {\n        set({ activeEmergencyId: id });\n      },\n\n      acknowledgeEmergency: (id: string) => {\n        const emergency = get().emergencies.get(id);\n        if (!emergency) return;\n\n        get().updateEmergency(id, { status: 'assigned' });\n        get().addTimelineEvent(id, {\n          ts: nowISO(),\n          actor: 'AMBULANCE',\n          type: 'acknowledged',\n          message: 'Emergency acknowledged by ambulance crew',\n        });\n\n        safeNotify(\"Emergency Acknowledged\", `Ambulance responding to ${emergency.type}`);\n      },\n\n      startEnroute: (id: string) => {\n        const emergency = get().emergencies.get(id);\n        if (!emergency) return;\n\n        get().updateEmergency(id, { status: 'enroute' });\n        get().addTimelineEvent(id, {\n          ts: nowISO(),\n          actor: 'AMBULANCE',\n          type: 'enroute',\n          message: 'Ambulance en route to patient location',\n          data: { eta: emergency.assignedHospital?.eta }\n        });\n\n        safeNotify(\"Ambulance En Route\", `ETA: ${emergency.assignedHospital?.eta || 'Unknown'} minutes`);\n      },\n\n      markArrived: (id: string) => {\n        const emergency = get().emergencies.get(id);\n        if (!emergency) return;\n\n        get().updateEmergency(id, { status: 'arrived' });\n        get().addTimelineEvent(id, {\n          ts: nowISO(),\n          actor: 'AMBULANCE',\n          type: 'arrived',\n          message: 'Ambulance arrived at patient location',\n        });\n\n        safeNotify(\"Ambulance Arrived\", \"Emergency response team is on scene\");\n      },\n\n      startPreparation: (id: string) => {\n        const emergency = get().emergencies.get(id);\n        if (!emergency) return;\n\n        get().addTimelineEvent(id, {\n          ts: nowISO(),\n          actor: 'HOSPITAL',\n          type: 'note',\n          message: 'Hospital preparation started',\n          data: { hospital: emergency.assignedHospital?.name }\n        });\n\n        safeNotify(\"Hospital Prep Started\", \"Emergency room is being prepared\");\n      },\n\n      completeEmergency: (id: string) => {\n        const emergency = get().emergencies.get(id);\n        if (!emergency) return;\n\n        get().updateEmergency(id, { status: 'completed' });\n        get().addTimelineEvent(id, {\n          ts: nowISO(),\n          actor: 'HOSPITAL',\n          type: 'completed',\n          message: 'Emergency care completed',\n        });\n\n        safeNotify(\"Emergency Completed\", \"Patient care has been completed\");\n      },\n\n      getActiveEmergency: () => {\n        const { emergencies, activeEmergencyId } = get();\n        return activeEmergencyId ? emergencies.get(activeEmergencyId) || null : null;\n      },\n\n      getEmergencyById: (id: string) => {\n        return get().emergencies.get(id) || null;\n      },\n\n      getAllEmergencies: () => {\n        return Array.from(get().emergencies.values())\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      },\n\n      getEmergenciesByStatus: (statuses: string[]) => {\n        return get().getAllEmergencies().filter(e => statuses.includes(e.status));\n      },\n\n      checkForDuplicate: (patientId: string, location: GeoLocation): string | null => {\n        const emergencies = get().getAllEmergencies();\n        const now = new Date();\n        const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);\n\n        for (const emergency of emergencies) {\n          // Skip completed/cancelled emergencies\n          if (emergency.status === 'completed' || emergency.status === 'cancelled') continue;\n          \n          // Check same patient\n          if (emergency.patientId === patientId) {\n            // Check time window (5 minutes)\n            const emergencyTime = new Date(emergency.createdAt);\n            if (emergencyTime >= fiveMinutesAgo) {\n              // Check distance (100 meters = 0.1 km)\n              const distance = calculateDistance(emergency.location, location);\n              if (distance < 0.1) {\n                return emergency.id;\n              }\n            }\n          }\n        }\n\n        return null;\n      },\n\n      clearAllEmergencies: () => {\n        set({\n          emergencies: new Map(),\n          activeEmergencyId: null\n        });\n        safeNotify(\"All Emergencies Cleared\", \"Ready for new alerts\");\n      },\n\n    }),\n    {\n      name: \"multi-emergency-store\",\n      storage: {\n        getItem: (name) => {\n          try {\n            const str = localStorage.getItem(name);\n            if (!str) return null;\n            \n            const parsed = JSON.parse(str);\n            // Properly deserialize emergencies Map\n            if (parsed.state?.emergencies) {\n              parsed.state.emergencies = deserializeEmergencies(parsed.state.emergencies);\n            }\n            return parsed;\n          } catch (error) {\n            console.warn('Failed to load persisted state:', error);\n            return null;\n          }\n        },\n        setItem: (name, value) => {\n          try {\n            // Convert Map to serializable array\n            const toSave = { ...value };\n            if (toSave.state?.emergencies instanceof Map) {\n              toSave.state.emergencies = serializeEmergencies(toSave.state.emergencies);\n            }\n            localStorage.setItem(name, JSON.stringify(toSave));\n          } catch (error) {\n            console.warn('Failed to persist state:', error);\n          }\n        },\n        removeItem: (name) => localStorage.removeItem(name),\n      },\n    }\n  )\n);","size_bytes":14877},"client/src/utils/notify.ts":{"content":"export async function safeNotify(title: string, body: string): Promise<void> {\n  // Request permission if not granted\n  if (\"Notification\" in window) {\n    if (Notification.permission === \"default\") {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission === \"granted\") {\n      new Notification(title, {\n        body,\n        icon: \"/favicon.ico\",\n        badge: \"/favicon.ico\",\n      });\n    }\n  }\n\n  // Trigger vibration if available\n  if (\"vibrate\" in navigator) {\n    navigator.vibrate(200);\n  }\n}\n\nexport function toast(message: string, type: \"success\" | \"error\" | \"info\" = \"info\") {\n  // Simple toast implementation\n  const toast = document.createElement(\"div\");\n  toast.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white font-medium transition-all duration-300 ${\n    type === \"success\" ? \"bg-green-600\" :\n    type === \"error\" ? \"bg-red-600\" :\n    \"bg-blue-600\"\n  }`;\n  toast.textContent = message;\n  \n  document.body.appendChild(toast);\n  \n  setTimeout(() => {\n    toast.style.opacity = \"0\";\n    setTimeout(() => document.body.removeChild(toast), 300);\n  }, 3000);\n}\n","size_bytes":1125},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/repo/inMemory.ts":{"content":"import type { Repo, Profile, Hospital, Emergency, NewEmergency, IncidentEvent, AmbulancePosition, EmergencyFilter } from './index';\nimport { randomUUID } from 'crypto';\n\nexport class InMemoryRepo implements Repo {\n  private profiles = new Map<string, Profile>();\n  private hospitals = new Map<string, Hospital>();\n  private emergencies = new Map<string, Emergency>();\n  private incidentEvents = new Map<string, IncidentEvent[]>();\n  private ambulancePositions = new Map<string, AmbulancePosition[]>();\n\n  constructor() {\n    // Initialize with demo data\n    this.initializeDemoData();\n  }\n\n  private initializeDemoData() {\n    // Demo hospitals\n    const demoHospitals: Hospital[] = [\n      {\n        id: 'hosp-001',\n        name: 'City General Hospital',\n        lat: 12.9716,\n        lon: 77.5946,\n        beds_available: 15,\n        doctors_available: 8,\n        capabilities: ['ICU', 'Ventilator', 'Cardio'],\n        accepting_emergencies: true,\n        created_at: new Date()\n      },\n      {\n        id: 'hosp-002',\n        name: 'Apollo Specialty Center',\n        lat: 12.9352,\n        lon: 77.6245,\n        beds_available: 8,\n        doctors_available: 12,\n        capabilities: ['ICU', 'Ventilator', 'Peds', 'Neuro'],\n        accepting_emergencies: true,\n        created_at: new Date()\n      },\n      {\n        id: 'hosp-003',\n        name: 'Fortis Healthcare',\n        lat: 12.9698,\n        lon: 77.7500,\n        beds_available: 20,\n        doctors_available: 15,\n        capabilities: ['ICU', 'Ventilator', 'Cardio', 'Peds', 'Neuro'],\n        accepting_emergencies: true,\n        created_at: new Date()\n      }\n    ];\n\n    demoHospitals.forEach(hospital => {\n      this.hospitals.set(hospital.id, hospital);\n    });\n\n    // Demo profiles\n    const demoProfiles: Profile[] = [\n      { id: 'demo-admin', role: 'admin', name: 'Demo Admin', phone: '+91-98765-43210' },\n      { id: 'demo-patient', role: 'patient', name: 'Rahul Mehta', phone: '+91-90000-00000' },\n      { id: 'demo-driver', role: 'driver', name: 'Ambulance Driver', phone: '+91-88888-88888' }\n    ];\n\n    demoProfiles.forEach(profile => {\n      this.profiles.set(profile.id, profile);\n    });\n  }\n\n  async getProfile(userId: string): Promise<Profile | null> {\n    return this.profiles.get(userId) || null;\n  }\n\n  async upsertProfile(profile: Profile): Promise<void> {\n    this.profiles.set(profile.id, { ...profile, created_at: profile.created_at || new Date() });\n  }\n\n  async listHospitals(): Promise<Hospital[]> {\n    return Array.from(this.hospitals.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getHospital(id: string): Promise<Hospital | null> {\n    return this.hospitals.get(id) || null;\n  }\n\n  async upsertHospital(hospital: Hospital): Promise<void> {\n    this.hospitals.set(hospital.id, { ...hospital, created_at: hospital.created_at || new Date() });\n  }\n\n  async createEmergency(newEmergency: NewEmergency): Promise<Emergency> {\n    const id = randomUUID();\n    const now = new Date();\n\n    // Check for duplicates (same patient_id within 5 minutes and 100m)\n    const recentEmergencies = Array.from(this.emergencies.values())\n      .filter(e => \n        e.patient_id === newEmergency.patient_id &&\n        e.status !== 'completed' &&\n        e.status !== 'cancelled' &&\n        (now.getTime() - e.created_at.getTime()) < 5 * 60 * 1000 // 5 minutes\n      );\n\n    let duplicate_of: string | undefined;\n    for (const existing of recentEmergencies) {\n      const distance = this.calculateDistance(\n        existing.lat, existing.lon,\n        newEmergency.lat, newEmergency.lon\n      );\n      if (distance < 0.1) { // 100m = 0.1km\n        duplicate_of = existing.id;\n        break;\n      }\n    }\n\n    const emergency: Emergency = {\n      id,\n      ...newEmergency,\n      status: 'active',\n      duplicate_of,\n      created_at: now,\n      updated_at: now\n    };\n\n    this.emergencies.set(id, emergency);\n\n    // Add initial incident event\n    await this.addIncidentEvent({\n      id: randomUUID(),\n      emergency_id: id,\n      kind: 'created',\n      data: { \n        triage_score: newEmergency.triage_score,\n        type: newEmergency.type,\n        needs: newEmergency.needs,\n        duplicate_of \n      },\n      ts: now\n    });\n\n    return emergency;\n  }\n\n  async listEmergencies(filter?: EmergencyFilter): Promise<Emergency[]> {\n    let emergencies = Array.from(this.emergencies.values());\n\n    if (filter?.status) {\n      emergencies = emergencies.filter(e => filter.status!.includes(e.status));\n    }\n\n    // Sort by created_at descending (newest first)\n    return emergencies.sort((a, b) => b.created_at.getTime() - a.created_at.getTime());\n  }\n\n  async getEmergency(id: string): Promise<Emergency | null> {\n    return this.emergencies.get(id) || null;\n  }\n\n  async updateEmergency(id: string, patch: Partial<Emergency>): Promise<void> {\n    const existing = this.emergencies.get(id);\n    if (!existing) return;\n\n    const updated = { ...existing, ...patch, updated_at: new Date() };\n    this.emergencies.set(id, updated);\n  }\n\n  async addIncidentEvent(event: IncidentEvent): Promise<void> {\n    const events = this.incidentEvents.get(event.emergency_id) || [];\n    events.push(event);\n    this.incidentEvents.set(event.emergency_id, events);\n  }\n\n  async listIncidentEvents(emergencyId: string): Promise<IncidentEvent[]> {\n    const events = this.incidentEvents.get(emergencyId) || [];\n    return events.sort((a, b) => a.ts.getTime() - b.ts.getTime());\n  }\n\n  async addAmbulancePosition(position: AmbulancePosition): Promise<void> {\n    const positions = this.ambulancePositions.get(position.ambulance_id) || [];\n    positions.push({ ...position, id: position.id || randomUUID() });\n    \n    // Keep only last 100 positions per ambulance\n    if (positions.length > 100) {\n      positions.splice(0, positions.length - 100);\n    }\n    \n    this.ambulancePositions.set(position.ambulance_id, positions);\n  }\n\n  async listAmbulancePositions(ambulanceId: string, limit = 50): Promise<AmbulancePosition[]> {\n    const positions = this.ambulancePositions.get(ambulanceId) || [];\n    return positions\n      .sort((a, b) => b.ts.getTime() - a.ts.getTime())\n      .slice(0, limit);\n  }\n\n  async archiveCompleted(olderThanDays: number): Promise<number> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n\n    let archivedCount = 0;\n    const emergencyEntries = Array.from(this.emergencies.entries());\n    \n    for (const [id, emergency] of emergencyEntries) {\n      if (emergency.status === 'completed' && emergency.updated_at < cutoffDate) {\n        this.emergencies.delete(id);\n        this.incidentEvents.delete(id);\n        archivedCount++;\n      }\n    }\n\n    return archivedCount;\n  }\n\n  // Helper method to calculate distance between two points (Haversine formula)\n  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    const R = 6371; // Earth's radius in km\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    \n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * \n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  private toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n}","size_bytes":7405},"design_guidelines.md":{"content":"# AI4Health Emergency MVP - Design Guidelines\n\n## Design Approach: Medical Dashboard System\n\n**Selected Framework**: Adapted from Carbon Design System and clinical dashboard patterns  \n**Rationale**: Healthcare emergency systems demand clarity, data density, and rapid decision-making. Design prioritizes functional hierarchy, status indicators, and role-specific workflows over aesthetic flourishes.\n\n## Core Design Principles\n\n1. **Medical Clarity First**: Every element serves operational needs - zero decorative complexity\n2. **Status-Driven Visual Language**: Color communicates urgency, not brand identity\n3. **Role-Optimized Layouts**: Each user type gets a distinct dashboard experience\n4. **Mobile-Critical Design**: Ambulance interface prioritizes one-handed operation\n\n---\n\n## Color Palette\n\n### Triage System (Primary Functional Colors)\n- **Critical Red**: 0 85% 50% - Severe emergencies, alerts, critical vitals\n- **Urgent Yellow**: 45 95% 50% - Moderate urgency, warnings, pending actions\n- **Stable Green**: 145 65% 45% - Normal status, completed tasks, stable vitals\n\n### Interface Foundation\n**Dark Mode** (Primary for all dashboards):\n- Background: 220 15% 10% (deep slate)\n- Surface: 220 12% 15% (elevated panels)\n- Border: 220 10% 25% (subtle dividers)\n- Text Primary: 0 0% 95%\n- Text Secondary: 0 0% 65%\n\n**Light Mode** (Optional for patient-facing):\n- Background: 210 20% 98%\n- Surface: 0 0% 100%\n- Border: 220 15% 90%\n- Text Primary: 220 25% 15%\n\n### Accent & Support\n- **Info Blue**: 210 85% 55% - System messages, navigation highlights\n- **Chart Purple**: 270 70% 60% - Data visualization secondary\n\n---\n\n## Typography\n\n**Primary**: Inter (Google Fonts) - Clean, clinical readability  \n**Monospace**: JetBrains Mono - Vital signs, timestamps, patient IDs\n\n### Hierarchy\n- **Dashboard Headers**: 32px/2rem, font-weight 700, tracking -0.02em\n- **Section Titles**: 20px/1.25rem, font-weight 600\n- **Body Text**: 16px/1rem, font-weight 400, line-height 1.6\n- **Critical Data**: 24px/1.5rem, font-weight 700, monospace\n- **Metadata**: 14px/0.875rem, font-weight 400, opacity 70%\n\n---\n\n## Layout System\n\n**Spacing Scale**: Tailwind units of **4, 6, 8, 12, 16** for consistent rhythm  \n(e.g., p-4 for cards, gap-6 for grids, mb-8 for section breaks)\n\n### Dashboard Grid Structure\n- **Patient View**: Single column mobile, 2-column tablet+ (Status + Actions)\n- **Ambulance View**: Stacked vertical cards (Map → Patient Details → Navigation)\n- **Hospital View**: 3-column desktop (Incoming Queue | Active Cases | Resources)\n\n### Container Strategy\n- Full viewport dashboards (h-screen with overflow-y-auto)\n- Card-based content: max-w-7xl mx-auto\n- Mobile: Full-width with p-4 margins\n- Desktop: px-8 with defined max-widths per role\n\n---\n\n## Component Library\n\n### Status Cards\n**Triage-coded borders** (border-l-4 with triage colors):\n- Patient info card: Photo/ID, vitals, triage badge\n- Incident card: Location, time elapsed, urgency ring indicator\n- Resource card: Availability count, status dot\n\n### Data Displays\n- **Vital Signs Panel**: Grid of labeled values (HR, BP, SpO2) with trend arrows\n- **Timeline Component**: Vertical dots connected line showing event history\n- **Map Component**: Full-width interactive with live ambulance markers\n- **Alert Banners**: Top-positioned, dismissible, severity-colored backgrounds\n\n### Controls\n- **Primary Actions**: Solid buttons with triage colors (Accept/Reject/Complete)\n- **Secondary Actions**: Outline buttons with subtle hover states (white/10% bg on dark)\n- **Emergency Button**: Large, red, pulsing subtle ring animation (scale-105 on press)\n\n### Navigation\n- **Top Bar**: Logo left, role indicator center, notifications/profile right\n- **Mobile**: Bottom tab bar with icons (Dashboard, Cases, Map, Profile)\n- **Desktop**: Sidebar with collapsible sections\n\n---\n\n## Images & Visual Assets\n\n### Hero Section: NO traditional hero image\nInstead: **Mission Control Dashboard** immediately visible on load\n\n### Required Images/Icons\n1. **Ambulance Icons**: Use Heroicons (truck, map-pin, clock for ETA)\n2. **Medical Icons**: Heroicons (heart, clipboard-check, user-group)\n3. **Patient Avatars**: Placeholder circles with initials, colored by triage status\n4. **Map Markers**: Custom colored pins (SVG) matching triage system\n5. **Hospital Badge**: Small logo/icon in top navigation (32px square)\n\n### Image Placement\n- **Patient Cards**: 64px circular avatar, left-aligned\n- **Ambulance Map**: Full-width embedded map (Mapbox/Leaflet style)\n- **Hospital Dashboard**: No decorative images - data visualization only\n\n---\n\n## Role-Specific Experiences\n\n### Patient/User View\n- **Layout**: Centered card design, breathing room, reassuring tone\n- **Focus**: Clear status updates, estimated times, emergency contact button\n- **Colors**: Softer triage indicators, more white space\n\n### Ambulance Driver (Mobile-First)\n- **Layout**: Stacked vertical, thumb-zone optimized buttons\n- **Focus**: Large map (50% viewport), next action card, one-tap status updates\n- **Interactions**: Swipe gestures for case details, large tap targets (min 48px)\n\n### Hospital Dashboard (Desktop-Optimized)\n- **Layout**: Multi-column grid, information density maximized\n- **Focus**: Queue management, resource allocation, real-time beds/staff counts\n- **Features**: Sortable tables, drag-drop triage, bulk actions toolbar\n\n---\n\n## Accessibility & Performance\n\n- **Contrast**: All text meets WCAG AAA on backgrounds (7:1 minimum)\n- **Focus States**: 2px blue ring offset on all interactive elements\n- **Touch Targets**: 48px minimum on mobile, 40px desktop\n- **Loading States**: Skeleton screens for dashboards, pulse animation\n- **Error Handling**: Inline validation, red border + icon + message\n- **Offline Mode**: Gray indicator banner, cached critical data visible\n\n---\n\n## Animation Strategy\n\n**Minimal, Purposeful Only**:\n- Status transitions: 200ms ease color changes\n- Emergency alerts: Single pulse on appearance (scale 1 to 1.02)\n- Live updates: Subtle fade-in for new items (300ms opacity)\n- NO scroll animations, NO decorative motion\n\n---\n\n## Key Design Decisions\n\n✓ Dark mode default for reduced eye strain during long shifts  \n✓ Triage colors override brand colors for instant recognition  \n✓ Mobile-first ambulance UI with landscape support for in-vehicle tablets  \n✓ Dashboard over landing page - users log directly into operational view  \n✓ Real-time indicators (pulsing dots, live timestamps) for active monitoring  \n✓ Zero marketing fluff - 100% functional healthcare interface","size_bytes":6551},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/views/EnhancedAmbulanceView.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  MapPin, \n  Navigation, \n  Clock, \n  Phone, \n  Heart, \n  Users, \n  Route,\n  CheckCircle,\n  XCircle,\n  PlayCircle,\n  StopCircle,\n  AlertTriangle,\n  Wifi,\n  WifiOff\n} from \"lucide-react\";\nimport { useAmbulanceDriverStore, startPositionTracking, stopPositionTracking } from \"../store/ambulance-driver-store\";\nimport { useMultiEmergencyStore } from \"../store/multi-emergency-store\";\nimport { Timeline } from \"../components/Timeline\";\n\nexport function EnhancedAmbulanceView() {\n  const {\n    currentShift,\n    availableAssignments,\n    acceptedAssignments,\n    currentPosition,\n    activeNavigation,\n    isOnline,\n    isTrackingEnabled,\n    driverId,\n    ambulanceId,\n    startShift,\n    endShift,\n    acceptAssignment,\n    rejectAssignment,\n    startNavigation,\n    endNavigation,\n    togglePositionTracking,\n    initializeDriver\n  } = useAmbulanceDriverStore();\n\n  const { \n    getAllEmergencies,\n    getEmergencyById,\n    updateEmergency\n  } = useMultiEmergencyStore();\n\n  const [showShiftDialog, setShowShiftDialog] = useState(false);\n  const [newDriverId, setNewDriverId] = useState(\"\");\n  const [newAmbulanceId, setNewAmbulanceId] = useState(\"\");\n\n  // Initialize driver if not set\n  useEffect(() => {\n    if (!driverId || !ambulanceId) {\n      initializeDriver(\"AMB_001\", \"Vehicle_001\");\n    }\n  }, [driverId, ambulanceId, initializeDriver]);\n\n  // Start/stop position tracking based on shift and settings\n  useEffect(() => {\n    if (currentShift && isTrackingEnabled) {\n      startPositionTracking();\n    } else {\n      stopPositionTracking();\n    }\n\n    return () => stopPositionTracking();\n  }, [currentShift, isTrackingEnabled]);\n\n  // Get accepted emergencies with full details\n  const acceptedEmergencies = acceptedAssignments\n    .map(id => getEmergencyById(id))\n    .filter(Boolean);\n\n  const handleStartShift = () => {\n    startShift(newDriverId || \"AMB_001\", newAmbulanceId || \"Vehicle_001\");\n    setShowShiftDialog(false);\n  };\n\n  const handleAcceptAssignment = (emergencyId: string) => {\n    acceptAssignment(emergencyId);\n    // Update emergency status to acknowledged\n    const emergency = getEmergencyById(emergencyId);\n    if (emergency) {\n      updateEmergency(emergencyId, { status: \"acknowledged\" });\n    }\n  };\n\n  const handleRejectAssignment = (emergencyId: string) => {\n    rejectAssignment(emergencyId);\n  };\n\n  const handleStartNavigation = (emergencyId: string) => {\n    const emergency = getEmergencyById(emergencyId);\n    if (emergency) {\n      startNavigation(emergency);\n      updateEmergency(emergencyId, { status: \"enroute\" });\n    }\n  };\n\n  const handleArrived = (emergencyId: string) => {\n    updateEmergency(emergencyId, { status: \"arrived\" });\n    endNavigation();\n  };\n\n  const getTriageColor = (level: string) => {\n    switch (level) {\n      case 'red': return 'bg-red-500';\n      case 'yellow': return 'bg-yellow-500';  \n      case 'green': return 'bg-green-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getTriageLabel = (score: number) => {\n    if (score >= 70) return { level: 'red', label: 'Critical' };\n    if (score >= 40) return { level: 'yellow', label: 'Urgent' };\n    return { level: 'green', label: 'Stable' };\n  };\n\n  if (!currentShift) {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"ambulance-driver-view\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"text-6xl mb-4\">🚑</div>\n            <h2 className=\"text-2xl font-semibold mb-4\">Start Your Shift</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Begin your ambulance driver shift to receive emergency assignments\n            </p>\n            \n            <Dialog open={showShiftDialog} onOpenChange={setShowShiftDialog}>\n              <DialogTrigger asChild>\n                <Button size=\"lg\" data-testid=\"button-start-shift\">\n                  <PlayCircle className=\"w-5 h-5 mr-2\" />\n                  Start Shift\n                </Button>\n              </DialogTrigger>\n              <DialogContent data-testid=\"shift-dialog\">\n                <DialogHeader>\n                  <DialogTitle>Start Shift</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Driver ID</label>\n                    <input\n                      type=\"text\"\n                      value={newDriverId}\n                      onChange={(e) => setNewDriverId(e.target.value)}\n                      placeholder=\"Enter your driver ID\"\n                      className=\"w-full mt-1 px-3 py-2 border rounded-md\"\n                      data-testid=\"input-driver-id\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Ambulance ID</label>\n                    <input\n                      type=\"text\"\n                      value={newAmbulanceId}\n                      onChange={(e) => setNewAmbulanceId(e.target.value)}\n                      placeholder=\"Enter ambulance vehicle ID\"\n                      className=\"w-full mt-1 px-3 py-2 border rounded-md\"\n                      data-testid=\"input-ambulance-id\"\n                    />\n                  </div>\n                  <Button onClick={handleStartShift} className=\"w-full\" data-testid=\"button-confirm-start-shift\">\n                    Start Shift\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </CardContent>\n        </Card>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"ambulance-driver-view\">\n      {/* Shift Status Header */}\n      <Card className=\"mb-6 border-green-200 bg-green-50\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n                <span className=\"font-semibold\">Shift Active</span>\n              </div>\n              <Badge variant=\"secondary\" data-testid=\"shift-info\">\n                {ambulanceId} - {driverId}\n              </Badge>\n              <div className=\"flex items-center space-x-1\">\n                {isOnline ? (\n                  <Wifi className=\"w-4 h-4 text-green-600\" />\n                ) : (\n                  <WifiOff className=\"w-4 h-4 text-red-600\" />\n                )}\n                <span className=\"text-sm\">{isOnline ? 'Online' : 'Offline'}</span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <label className=\"text-sm\">GPS Tracking</label>\n                <Switch\n                  checked={isTrackingEnabled}\n                  onCheckedChange={togglePositionTracking}\n                  data-testid=\"gps-toggle\"\n                />\n              </div>\n              \n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-end-shift\">\n                    <StopCircle className=\"w-4 h-4 mr-1\" />\n                    End Shift\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>End Shift</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      Are you sure you want to end your shift? You will stop receiving new emergency assignments.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={endShift} data-testid=\"button-confirm-end-shift\">\n                      End Shift\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"assignments\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"assignments\" data-testid=\"tab-assignments\">\n            Assignments ({availableAssignments.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"active\" data-testid=\"tab-active\">\n            Active ({acceptedEmergencies.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"navigation\" data-testid=\"tab-navigation\">\n            Navigation\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Available Assignments Tab */}\n        <TabsContent value=\"assignments\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Available Emergency Assignments</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {availableAssignments.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No new emergency assignments</p>\n                  <p className=\"text-sm\">New emergencies will appear here</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {availableAssignments.map((assignment) => (\n                    <Card key={assignment.emergencyId} className=\"border-red-200\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <Badge className={getTriageColor(assignment.triageLevel)}>\n                                {assignment.triageLevel.toUpperCase()}\n                              </Badge>\n                              <span className=\"font-semibold\">{assignment.patientName}</span>\n                            </div>\n                            \n                            <div className=\"space-y-1 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center space-x-1\">\n                                <MapPin className=\"w-4 h-4\" />\n                                <span>{assignment.location}</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <Route className=\"w-4 h-4\" />\n                                <span>{assignment.estimatedDistance}km away</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <Clock className=\"w-4 h-4\" />\n                                <span>Expires: {new Date(assignment.expiresAt).toLocaleTimeString()}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleRejectAssignment(assignment.emergencyId)}\n                              data-testid={`button-reject-${assignment.emergencyId}`}\n                            >\n                              <XCircle className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleAcceptAssignment(assignment.emergencyId)}\n                              data-testid={`button-accept-${assignment.emergencyId}`}\n                            >\n                              <CheckCircle className=\"w-4 h-4 mr-1\" />\n                              Accept\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Active Emergencies Tab */}\n        <TabsContent value=\"active\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Active Emergencies</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {acceptedEmergencies.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Heart className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No active emergencies</p>\n                  <p className=\"text-sm\">Accepted assignments will appear here</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {acceptedEmergencies.map((emergency) => {\n                    if (!emergency) return null;\n                    const triage = getTriageLabel(emergency.triageScore || 0);\n                    return (\n                      <Card key={emergency.id} className=\"border-blue-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <Badge className={getTriageColor(triage.level)}>\n                                  {triage.label}\n                                </Badge>\n                                <span className=\"font-semibold\">{emergency.patientId || 'Unknown Patient'}</span>\n                                <Badge variant=\"outline\">{emergency.status}</Badge>\n                              </div>\n                              \n                              {emergency.location && (\n                                <div className=\"flex items-center space-x-1 text-sm text-muted-foreground mb-2\">\n                                  <MapPin className=\"w-4 h-4\" />\n                                  <span>{emergency.location.address}</span>\n                                </div>\n                              )}\n                              \n                              {emergency.vitals && (\n                                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                                  <div>HR: {emergency.vitals.hr || 'N/A'} bpm</div>\n                                  <div>SpO2: {emergency.vitals.spo2 || 'N/A'}%</div>\n                                  <div>BP: {emergency.vitals.sbp || 'N/A'}/{emergency.vitals.dbp || 'N/A'}</div>\n                                  <div>RR: {emergency.vitals.rr || 'N/A'}/min</div>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              data-testid={`button-call-${emergency.id}`}\n                            >\n                              <Phone className=\"w-4 h-4 mr-1\" />\n                              Call\n                            </Button>\n                            \n                            {emergency.status !== \"arrived\" && (\n                              <Button\n                                size=\"sm\"\n                                onClick={() => handleStartNavigation(emergency.id)}\n                                data-testid={`button-navigate-${emergency.id}`}\n                              >\n                                <Navigation className=\"w-4 h-4 mr-1\" />\n                                Navigate\n                              </Button>\n                            )}\n                            \n                            {emergency.status === \"enroute\" && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleArrived(emergency.id)}\n                                className=\"bg-green-50\"\n                                data-testid={`button-arrived-${emergency.id}`}\n                              >\n                                <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                Arrived\n                              </Button>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Navigation Tab */}\n        <TabsContent value=\"navigation\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Navigation & GPS</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {activeNavigation ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg\">\n                    <div>\n                      <h3 className=\"font-semibold\">Active Navigation</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        To: {activeNavigation.destination.address}\n                      </p>\n                      <Badge variant=\"outline\">{activeNavigation.status}</Badge>\n                    </div>\n                    <Navigation className=\"w-8 h-8 text-blue-600\" />\n                  </div>\n\n                  <Button\n                    variant=\"outline\"\n                    onClick={endNavigation}\n                    data-testid=\"button-end-navigation\"\n                  >\n                    End Navigation\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Navigation className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No active navigation</p>\n                  <p className=\"text-sm\">Navigation will appear when you start routing to an emergency</p>\n                </div>\n              )}\n\n              {/* GPS Status */}\n              <div className=\"mt-6 p-4 border rounded-lg\">\n                <h3 className=\"font-semibold mb-2\">GPS Status</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Tracking:</span>\n                    <Badge variant={isTrackingEnabled ? \"default\" : \"secondary\"}>\n                      {isTrackingEnabled ? \"Enabled\" : \"Disabled\"}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Connection:</span>\n                    <Badge variant={isOnline ? \"default\" : \"destructive\"}>\n                      {isOnline ? \"Online\" : \"Offline\"}\n                    </Badge>\n                  </div>\n                  {currentPosition && (\n                    <div className=\"flex justify-between\">\n                      <span>Last Position:</span>\n                      <span className=\"text-xs font-mono\">\n                        {currentPosition.lat.toFixed(6)}, {currentPosition.lon.toFixed(6)}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </main>\n  );\n}","size_bytes":20656},"server/storage.ts":{"content":"import { type User, type InsertUser, type Emergency, type InsertEmergency } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getEmergency(id: string): Promise<Emergency | undefined>;\n  createEmergency(emergency: InsertEmergency): Promise<Emergency>;\n  updateEmergency(id: string, emergency: Partial<InsertEmergency>): Promise<Emergency | undefined>;\n  getAllEmergencies(): Promise<Emergency[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private emergencies: Map<string, Emergency>;\n\n  constructor() {\n    this.users = new Map();\n    this.emergencies = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getEmergency(id: string): Promise<Emergency | undefined> {\n    return this.emergencies.get(id);\n  }\n\n  async createEmergency(insertEmergency: InsertEmergency): Promise<Emergency> {\n    const id = randomUUID();\n    const now = new Date();\n    const emergency: Emergency = {\n      ...insertEmergency,\n      id,\n      location: insertEmergency.location || null,\n      etaMin: insertEmergency.etaMin || null,\n      // Ensure new fields have proper defaults\n      lat: insertEmergency.lat || null,\n      lon: insertEmergency.lon || null,\n      type: insertEmergency.type || null,\n      needs: insertEmergency.needs || null,\n      triageScore: insertEmergency.triageScore || null,\n      status: insertEmergency.status || 'active',\n      assignedHospitalId: insertEmergency.assignedHospitalId || null,\n      reroutedToId: insertEmergency.reroutedToId || null,\n      assignedEtaMin: insertEmergency.assignedEtaMin || null,\n      duplicateOf: insertEmergency.duplicateOf || null,\n      vitals: insertEmergency.vitals || null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.emergencies.set(id, emergency);\n    return emergency;\n  }\n\n  async updateEmergency(id: string, updateData: Partial<InsertEmergency>): Promise<Emergency | undefined> {\n    const emergency = this.emergencies.get(id);\n    if (!emergency) return undefined;\n\n    const updated: Emergency = {\n      ...emergency,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.emergencies.set(id, updated);\n    return updated;\n  }\n\n  async getAllEmergencies(): Promise<Emergency[]> {\n    return Array.from(this.emergencies.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2939},"client/src/components/EmergencyCard.tsx":{"content":"import { Clock, MapPin, User, AlertTriangle, Hospital, Activity } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport type { EnhancedEmergency } from \"../store/multi-emergency-store\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface EmergencyCardProps {\n  emergency: EnhancedEmergency;\n  onSelect?: () => void;\n  onAcknowledge?: () => void;\n  onEnroute?: () => void;\n  onArrived?: () => void;\n  onPrepare?: () => void;\n  showActions?: boolean;\n  isSelected?: boolean;\n}\n\nconst statusConfig = {\n  active: { label: 'Active', color: 'bg-red-500 text-white', icon: AlertTriangle },\n  assigned: { label: 'Assigned', color: 'bg-orange-500 text-white', icon: Clock },\n  enroute: { label: 'En Route', color: 'bg-blue-500 text-white', icon: Activity },\n  arrived: { label: 'Arrived', color: 'bg-green-500 text-white', icon: MapPin },\n  completed: { label: 'Completed', color: 'bg-gray-500 text-white', icon: Hospital },\n  cancelled: { label: 'Cancelled', color: 'bg-gray-400 text-white', icon: AlertTriangle },\n};\n\nconst triageConfig = {\n  red: { label: 'Critical', color: 'bg-red-100 text-red-800 border-red-200' },\n  yellow: { label: 'Urgent', color: 'bg-yellow-100 text-yellow-800 border-yellow-200' },\n  green: { label: 'Stable', color: 'bg-green-100 text-green-800 border-green-200' },\n};\n\nexport function EmergencyCard({ \n  emergency, \n  onSelect, \n  onAcknowledge, \n  onEnroute, \n  onArrived, \n  onPrepare,\n  showActions = false,\n  isSelected = false \n}: EmergencyCardProps) {\n  const StatusIcon = statusConfig[emergency.status].icon;\n  const timeAgo = formatDistanceToNow(new Date(emergency.createdAt), { addSuffix: true });\n  \n  return (\n    <Card \n      className={`transition-all duration-200 hover:shadow-lg cursor-pointer ${\n        isSelected ? 'ring-2 ring-blue-500 shadow-md' : ''\n      } ${emergency.duplicateOf ? 'border-orange-200 bg-orange-50' : ''}`}\n      onClick={onSelect}\n      data-testid={`emergency-card-${emergency.id}`}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <StatusIcon className=\"w-5 h-5 text-muted-foreground\" />\n            <div>\n              <h3 className=\"font-semibold text-sm\" data-testid=\"emergency-type\">\n                {emergency.type}\n              </h3>\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"emergency-time\">\n                {timeAgo}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-col items-end space-y-1\">\n            <Badge \n              className={`text-xs ${statusConfig[emergency.status].color}`}\n              data-testid=\"emergency-status\"\n            >\n              {statusConfig[emergency.status].label}\n            </Badge>\n            <Badge \n              variant=\"outline\" \n              className={`text-xs ${triageConfig[emergency.triageLevel].color}`}\n              data-testid=\"triage-level\"\n            >\n              {triageConfig[emergency.triageLevel].label} ({emergency.triageScore})\n            </Badge>\n          </div>\n        </div>\n        \n        {emergency.duplicateOf && (\n          <div className=\"mt-2 p-2 bg-orange-100 border border-orange-200 rounded text-xs text-orange-800\">\n            ⚠️ Potential duplicate of existing emergency\n          </div>\n        )}\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-3\">\n          {/* Patient Info */}\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <User className=\"w-4 h-4 text-muted-foreground\" />\n            <span data-testid=\"patient-info\">\n              {emergency.patient.name} ({emergency.patient.age}y, {emergency.patient.blood})\n            </span>\n          </div>\n          \n          {/* Location */}\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"truncate\" data-testid=\"emergency-location\">\n              {emergency.location.address || `${emergency.location.lat}, ${emergency.location.lon}`}\n            </span>\n          </div>\n          \n          {/* Assigned Hospital */}\n          {emergency.assignedHospital && (\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <Hospital className=\"w-4 h-4 text-muted-foreground\" />\n              <span data-testid=\"assigned-hospital\">\n                {emergency.assignedHospital.name} (ETA: {emergency.assignedHospital.eta}m)\n              </span>\n            </div>\n          )}\n          \n          {/* Needs */}\n          {emergency.needs.length > 0 && (\n            <div className=\"flex flex-wrap gap-1\">\n              {emergency.needs.slice(0, 3).map((need) => (\n                <Badge \n                  key={need} \n                  variant=\"secondary\" \n                  className=\"text-xs\"\n                  data-testid={`need-${need.toLowerCase()}`}\n                >\n                  {need}\n                </Badge>\n              ))}\n              {emergency.needs.length > 3 && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  +{emergency.needs.length - 3} more\n                </Badge>\n              )}\n            </div>\n          )}\n          \n          {/* Vitals Summary */}\n          {emergency.vitals && (\n            <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n              <Activity className=\"w-3 h-3\" />\n              <span>\n                {emergency.vitals.hr && `HR: ${emergency.vitals.hr}`}\n                {emergency.vitals.spo2 && ` | SpO2: ${emergency.vitals.spo2}%`}\n                {emergency.vitals.sbp && ` | BP: ${emergency.vitals.sbp}`}\n              </span>\n            </div>\n          )}\n          \n          {/* Actions */}\n          {showActions && (\n            <div className=\"flex flex-wrap gap-2 pt-2 border-t\">\n              {emergency.status === 'active' && onAcknowledge && (\n                <Button \n                  size=\"sm\" \n                  onClick={(e) => { e.stopPropagation(); onAcknowledge(); }}\n                  data-testid=\"button-acknowledge\"\n                >\n                  Acknowledge\n                </Button>\n              )}\n              {emergency.status === 'assigned' && onEnroute && (\n                <Button \n                  size=\"sm\" \n                  onClick={(e) => { e.stopPropagation(); onEnroute(); }}\n                  data-testid=\"button-enroute\"\n                >\n                  En Route\n                </Button>\n              )}\n              {emergency.status === 'enroute' && onArrived && (\n                <Button \n                  size=\"sm\" \n                  onClick={(e) => { e.stopPropagation(); onArrived(); }}\n                  data-testid=\"button-arrived\"\n                >\n                  Mark Arrived\n                </Button>\n              )}\n              {emergency.status === 'assigned' && onPrepare && (\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={(e) => { e.stopPropagation(); onPrepare(); }}\n                  data-testid=\"button-prepare\"\n                >\n                  Start Prep\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7541},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/store/ai4h-store.ts":{"content":"import { create } from \"zustand\";\nimport type { AI4HState, HistoryItem, Patient, GeoLocation, Status } from \"../types\";\nimport { demoPatient } from \"../types\";\nimport { broadcastState, loadStoredState, onStateUpdate } from \"../utils/bus\";\nimport { nowISO } from \"../utils/time\";\nimport { safeNotify } from \"../utils/notify\";\n\ninterface AI4HStore extends AI4HState {\n  // Actions\n  triggerSOS: () => void;\n  acknowledgeEmergency: () => void;\n  startEnroute: () => void;\n  markArrived: () => void;\n  startHospitalPrep: () => void;\n  updateLocation: (geo: GeoLocation) => void;\n  decrementETA: () => void;\n  resetEmergency: () => void;\n  // State management\n  initializeStore: () => void;\n  setFromBroadcast: (state: AI4HState) => void;\n}\n\nconst initialState: AI4HState = {\n  status: null,\n  etaMin: null,\n  patient: null,\n  geo: { address: \"Koramangala, Bangalore, Karnataka\" },\n  history: [],\n  lastEventTs: undefined,\n};\n\nexport const useAI4HStore = create<AI4HStore>((set, get) => ({\n  ...initialState,\n\n  triggerSOS: () => {\n    const currentState = get();\n    const now = nowISO();\n    const historyItem: HistoryItem = {\n      ts: now,\n      actor: \"USER\",\n      type: \"SOS_NEW\",\n      note: \"Emergency alert sent\",\n    };\n\n    const newState: AI4HState = {\n      status: \"NEW\",\n      etaMin: 7,\n      patient: demoPatient,\n      geo: currentState.geo,\n      history: [...currentState.history, historyItem],\n      lastEventTs: now,\n    };\n\n    set(newState);\n    broadcastState(newState);\n    \n    // Notify other tabs\n    safeNotify(\"Emergency Alert Sent\", \"Ambulance and hospital have been notified\");\n  },\n\n  acknowledgeEmergency: () => {\n    const currentState = get();\n    const now = nowISO();\n    const historyItem: HistoryItem = {\n      ts: now,\n      actor: \"AMBULANCE\",\n      type: \"AMB_ACK\",\n      note: \"Emergency acknowledged\",\n    };\n\n    const newState: AI4HState = {\n      status: \"ACK\",\n      etaMin: 6,\n      patient: currentState.patient,\n      geo: currentState.geo,\n      history: [...currentState.history, historyItem],\n      lastEventTs: now,\n    };\n\n    set(newState);\n    broadcastState(newState);\n    \n    safeNotify(\"Emergency Acknowledged\", \"Ambulance is preparing to respond\");\n  },\n\n  startEnroute: () => {\n    const currentState = get();\n    const now = nowISO();\n    const historyItem: HistoryItem = {\n      ts: now,\n      actor: \"AMBULANCE\",\n      type: \"AMB_ENROUTE\",\n      note: \"Ambulance en route to patient\",\n    };\n\n    const newState: AI4HState = {\n      status: \"ENROUTE\",\n      etaMin: currentState.etaMin,\n      patient: currentState.patient,\n      geo: currentState.geo,\n      history: [...currentState.history, historyItem],\n      lastEventTs: now,\n    };\n\n    set(newState);\n    broadcastState(newState);\n    \n    safeNotify(\"Ambulance En Route\", \"ETA countdown started\");\n  },\n\n  markArrived: () => {\n    const currentState = get();\n    const now = nowISO();\n    const historyItem: HistoryItem = {\n      ts: now,\n      actor: \"AMBULANCE\",\n      type: \"AMB_ARRIVED\",\n      note: \"Ambulance arrived at location\",\n    };\n\n    const newState: AI4HState = {\n      status: \"ARRIVED\",\n      etaMin: 0,\n      patient: currentState.patient,\n      geo: currentState.geo,\n      history: [...currentState.history, historyItem],\n      lastEventTs: now,\n    };\n\n    set(newState);\n    broadcastState(newState);\n    \n    safeNotify(\"Ambulance Arrived\", \"Emergency response team is on scene\");\n  },\n\n  startHospitalPrep: () => {\n    const currentState = get();\n    const now = nowISO();\n    const historyItem: HistoryItem = {\n      ts: now,\n      actor: \"HOSPITAL\",\n      type: \"HOSP_PREP\",\n      note: \"Hospital preparation started\",\n    };\n\n    const newState: AI4HState = {\n      status: currentState.status,\n      etaMin: currentState.etaMin,\n      patient: currentState.patient,\n      geo: currentState.geo,\n      history: [...currentState.history, historyItem],\n      lastEventTs: now,\n    };\n\n    set(newState);\n    broadcastState(newState);\n    \n    safeNotify(\"Hospital Prep Started\", \"Emergency room is being prepared\");\n  },\n\n  updateLocation: (geo: GeoLocation) => {\n    const currentState = get();\n    const newState: AI4HState = {\n      status: currentState.status,\n      etaMin: currentState.etaMin,\n      patient: currentState.patient,\n      geo,\n      history: currentState.history,\n      lastEventTs: currentState.lastEventTs,\n    };\n\n    set(newState);\n    broadcastState(newState);\n  },\n\n  decrementETA: () => {\n    const currentState = get();\n    const currentETA = currentState.etaMin;\n    if (currentETA && currentETA > 0) {\n      const newState: AI4HState = {\n        status: currentState.status,\n        etaMin: currentETA - 1,\n        patient: currentState.patient,\n        geo: currentState.geo,\n        history: currentState.history,\n        lastEventTs: currentState.lastEventTs,\n      };\n\n      set(newState);\n      broadcastState(newState);\n    }\n  },\n\n  resetEmergency: () => {\n    const currentState = get();\n    const now = nowISO();\n    const historyItem: HistoryItem = {\n      ts: now,\n      actor: \"USER\", \n      type: \"SOS_NEW\", // Will use existing type for now to maintain compatibility\n      note: \"Emergency reset - ready for new alert\",\n    };\n\n    const newState: AI4HState = {\n      status: null,\n      etaMin: null,\n      patient: null,\n      geo: currentState.geo, // Keep current location\n      history: [...currentState.history, historyItem],\n      lastEventTs: now,\n    };\n\n    set(newState);\n    broadcastState(newState);\n    \n    // Stop any running countdown\n    stopETACountdown();\n    \n    safeNotify(\"Emergency Reset\", \"Ready to send new alert\");\n  },\n\n  initializeStore: () => {\n    const stored = loadStoredState();\n    if (stored) {\n      set(stored);\n    }\n\n    // Listen for updates from other tabs\n    onStateUpdate((state) => {\n      get().setFromBroadcast(state);\n    });\n  },\n\n  setFromBroadcast: (state: AI4HState) => {\n    set(state);\n  },\n}));\n\n// ETA countdown interval\nlet etaInterval: NodeJS.Timeout | null = null;\n\nexport function startETACountdown() {\n  if (etaInterval) clearInterval(etaInterval);\n  \n  etaInterval = setInterval(() => {\n    const store = useAI4HStore.getState();\n    if (store.status === \"ENROUTE\" && store.etaMin && store.etaMin > 0) {\n      store.decrementETA();\n    } else if (store.etaMin === 0) {\n      clearInterval(etaInterval!);\n      etaInterval = null;\n    }\n  }, 30000); // Every 30 seconds for demo purposes\n}\n\nexport function stopETACountdown() {\n  if (etaInterval) {\n    clearInterval(etaInterval);\n    etaInterval = null;\n  }\n}\n","size_bytes":6568},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/views/UserView.tsx":{"content":"import { useState } from \"react\";\nimport { useAI4HStore } from \"../store/ai4h-store\";\nimport { Timeline } from \"../components/Timeline\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"../utils/notify\";\nimport { demoPatient } from \"../types\";\n\nexport function UserView() {\n  const { triggerSOS, updateLocation, resetEmergency, history, status, geo } = useAI4HStore();\n  const [isLoadingLocation, setIsLoadingLocation] = useState(false);\n\n  const handleSOS = () => {\n    triggerSOS();\n    toast(\"Emergency Alert Sent\", \"success\");\n  };\n\n  const handleReset = () => {\n    resetEmergency();\n    toast(\"Emergency Reset\", \"success\");\n  };\n\n  const handleUpdateLocation = async () => {\n    setIsLoadingLocation(true);\n    \n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          updateLocation({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n            address: \"Current GPS Location\",\n          });\n          toast(\"Location Updated\", \"success\");\n          setIsLoadingLocation(false);\n        },\n        (error) => {\n          console.error(\"Geolocation error:\", error);\n          toast(\"Failed to get location\", \"error\");\n          setIsLoadingLocation(false);\n        }\n      );\n    } else {\n      toast(\"Geolocation not supported\", \"error\");\n      setIsLoadingLocation(false);\n    }\n  };\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"user-view\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Emergency Profile Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-foreground\">Emergency Profile</h2>\n              <span className=\"text-sm px-3 py-1 bg-green-100 text-green-800 rounded-full\">\n                Verified\n              </span>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-user text-gray-500 text-xl\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-foreground\" data-testid=\"patient-name\">\n                    {demoPatient.name}\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"patient-details\">\n                    Age: {demoPatient.age}, Blood Type: {demoPatient.blood}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Medical Conditions</label>\n                  <div className=\"mt-1\">\n                    {demoPatient.conditions.map((condition) => (\n                      <span \n                        key={condition}\n                        className=\"inline-block px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full mr-1\"\n                        data-testid={`condition-${condition.toLowerCase()}`}\n                      >\n                        {condition}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Allergies</label>\n                  <div className=\"mt-1\">\n                    {demoPatient.allergies.map((allergy) => (\n                      <span \n                        key={allergy}\n                        className=\"inline-block px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full mr-1\"\n                        data-testid={`allergy-${allergy.toLowerCase()}`}\n                      >\n                        {allergy}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"border-t border-border pt-4\">\n                <label className=\"text-sm font-medium text-muted-foreground\">Emergency Contact</label>\n                <div className=\"mt-2\">\n                  <p className=\"font-medium\" data-testid=\"guardian-name\">{demoPatient.guardian.name}</p>\n                  <p className=\"text-muted-foreground\" data-testid=\"guardian-phone\">{demoPatient.guardian.phone}</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Location & Emergency Action */}\n        <div className=\"space-y-6\">\n          {/* Location Card */}\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-lg font-semibold text-foreground mb-4\">Current Location</h2>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-map-marker-alt text-blue-600\"></i>\n                  <span className=\"text-muted-foreground\" data-testid=\"current-location\">\n                    {geo?.address || \"Location not set\"}\n                  </span>\n                </div>\n                <Button \n                  onClick={handleUpdateLocation}\n                  disabled={isLoadingLocation}\n                  className=\"w-full bg-blue-100 text-blue-800 hover:bg-blue-200\"\n                  data-testid=\"button-update-location\"\n                >\n                  <i className=\"fas fa-location-crosshairs mr-2\"></i>\n                  {isLoadingLocation ? \"Updating...\" : \"Update Location\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Emergency SOS Button */}\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <h2 className=\"text-lg font-semibold text-foreground mb-4\">Emergency Response</h2>\n                <div className=\"space-y-3\">\n                  <Button\n                    onClick={handleSOS}\n                    disabled={status !== null}\n                    className={`w-full font-bold py-6 px-8 text-xl transition-all duration-200 transform hover:scale-105 ${\n                      status !== null \n                        ? \"bg-green-600 text-white\" \n                        : \"bg-red-600 hover:bg-red-700 text-white animate-pulse\"\n                    }`}\n                    data-testid=\"button-emergency-sos\"\n                  >\n                    <i className=\"fas fa-exclamation-triangle mr-3\"></i>\n                    {status !== null ? \"🚨 ALERT SENT\" : \"🚨 EMERGENCY SOS\"}\n                  </Button>\n                  \n                  {status !== null && (\n                    <Button\n                      onClick={handleReset}\n                      className=\"w-full font-medium py-3 px-6 text-base bg-gray-500 hover:bg-gray-600 text-white transition-all duration-200\"\n                      data-testid=\"button-reset-emergency\"\n                    >\n                      <i className=\"fas fa-refresh mr-2\"></i>\n                      Reset Emergency\n                    </Button>\n                  )}\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-3\">\n                  {status !== null \n                    ? \"Click Reset to clear the alert and send another\" \n                    : \"This will alert ambulance and hospital services immediately\"\n                  }\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Timeline Section */}\n      <div className=\"mt-8\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-lg font-semibold text-foreground mb-4\">Recent Activity</h2>\n            <Timeline history={history} limit={10} />\n          </CardContent>\n        </Card>\n      </div>\n    </main>\n  );\n}\n","size_bytes":8165},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/EmergencyQueue.tsx":{"content":"import { useState } from \"react\";\nimport { Filter, Search, RefreshCw, Plus } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useMultiEmergencyStore, type EnhancedEmergency } from \"../store/multi-emergency-store\";\nimport { EmergencyCard } from \"./EmergencyCard\";\n\ninterface EmergencyQueueProps {\n  onCreateNew?: () => void;\n  onEmergencySelect?: (emergency: EnhancedEmergency) => void;\n  showActions?: boolean;\n  userRole?: 'user' | 'ambulance' | 'hospital' | 'admin';\n}\n\nexport function EmergencyQueue({ \n  onCreateNew, \n  onEmergencySelect,\n  showActions = false,\n  userRole = 'admin'\n}: EmergencyQueueProps) {\n  const {\n    getAllEmergencies,\n    getEmergenciesByStatus,\n    activeEmergencyId,\n    setActiveEmergency,\n    acknowledgeEmergency,\n    startEnroute,\n    markArrived,\n    startPreparation,\n    clearAllEmergencies\n  } = useMultiEmergencyStore();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [triageFilter, setTriageFilter] = useState<string>(\"all\");\n  const [showFilters, setShowFilters] = useState(false);\n\n  // Get emergencies based on filters\n  const getFilteredEmergencies = () => {\n    let emergencies = statusFilter === \"all\" \n      ? getAllEmergencies() \n      : getEmergenciesByStatus([statusFilter]);\n\n    // Apply triage filter\n    if (triageFilter !== \"all\") {\n      emergencies = emergencies.filter(e => e.triageLevel === triageFilter);\n    }\n\n    // Apply search filter\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase();\n      emergencies = emergencies.filter(e =>\n        e.type.toLowerCase().includes(search) ||\n        e.patient.name.toLowerCase().includes(search) ||\n        e.location.address?.toLowerCase().includes(search) ||\n        e.id.toLowerCase().includes(search)\n      );\n    }\n\n    return emergencies;\n  };\n\n  const emergencies = getFilteredEmergencies();\n\n  const handleEmergencySelect = (emergency: EnhancedEmergency) => {\n    setActiveEmergency(emergency.id);\n    onEmergencySelect?.(emergency);\n  };\n\n  const getStatusCounts = () => {\n    const all = getAllEmergencies();\n    return {\n      all: all.length,\n      active: all.filter(e => e.status === 'active').length,\n      assigned: all.filter(e => e.status === 'assigned').length,\n      enroute: all.filter(e => e.status === 'enroute').length,\n      arrived: all.filter(e => e.status === 'arrived').length,\n      completed: all.filter(e => e.status === 'completed').length,\n    };\n  };\n\n  const statusCounts = getStatusCounts();\n\n  return (\n    <Card className=\"h-full\" data-testid=\"emergency-queue\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg\">Emergency Queue</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => setShowFilters(!showFilters)}\n              data-testid=\"button-toggle-filters\"\n            >\n              <Filter className=\"w-4 h-4\" />\n            </Button>\n            {onCreateNew && (\n              <Button\n                size=\"sm\"\n                onClick={onCreateNew}\n                data-testid=\"button-create-emergency\"\n              >\n                <Plus className=\"w-4 h-4 mr-1\" />\n                New\n              </Button>\n            )}\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  data-testid=\"button-clear-all\"\n                >\n                  <RefreshCw className=\"w-4 h-4\" />\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent data-testid=\"queue-clear-dialog\">\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Clear All Emergencies</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    This action cannot be undone. This will permanently delete all emergency records \n                    and timeline data from the current session.\n                    <br /><br />\n                    Are you sure you want to clear all emergencies?\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel data-testid=\"button-cancel-queue-clear\">\n                    Cancel\n                  </AlertDialogCancel>\n                  <AlertDialogAction \n                    onClick={clearAllEmergencies}\n                    className=\"bg-red-600 hover:bg-red-700\"\n                    data-testid=\"button-confirm-queue-clear\"\n                  >\n                    Clear All\n                  </AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          </div>\n        </div>\n\n        {/* Status Summary */}\n        <div className=\"flex flex-wrap gap-2\">\n          <Badge variant=\"outline\" data-testid=\"count-all\">\n            All: {statusCounts.all}\n          </Badge>\n          <Badge className=\"bg-red-100 text-red-800\" data-testid=\"count-active\">\n            Active: {statusCounts.active}\n          </Badge>\n          <Badge className=\"bg-orange-100 text-orange-800\" data-testid=\"count-assigned\">\n            Assigned: {statusCounts.assigned}\n          </Badge>\n          <Badge className=\"bg-blue-100 text-blue-800\" data-testid=\"count-enroute\">\n            En Route: {statusCounts.enroute}\n          </Badge>\n          <Badge className=\"bg-green-100 text-green-800\" data-testid=\"count-arrived\">\n            Arrived: {statusCounts.arrived}\n          </Badge>\n        </div>\n\n        {/* Filters */}\n        {showFilters && (\n          <div className=\"space-y-3 pt-3 border-t\">\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search emergencies...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\" data-testid=\"select-status\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"assigned\">Assigned</SelectItem>\n                  <SelectItem value=\"enroute\">En Route</SelectItem>\n                  <SelectItem value=\"arrived\">Arrived</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={triageFilter} onValueChange={setTriageFilter}>\n                <SelectTrigger className=\"w-[120px]\" data-testid=\"select-triage\">\n                  <SelectValue placeholder=\"Triage\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Levels</SelectItem>\n                  <SelectItem value=\"red\">Critical</SelectItem>\n                  <SelectItem value=\"yellow\">Urgent</SelectItem>\n                  <SelectItem value=\"green\">Stable</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-3 max-h-[600px] overflow-y-auto\">\n          {emergencies.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-emergencies\">\n              <p>No emergencies found.</p>\n              {onCreateNew && (\n                <Button \n                  variant=\"outline\" \n                  className=\"mt-2\"\n                  onClick={onCreateNew}\n                  data-testid=\"button-create-first\"\n                >\n                  Create First Emergency\n                </Button>\n              )}\n            </div>\n          ) : (\n            emergencies.map((emergency) => (\n              <EmergencyCard\n                key={emergency.id}\n                emergency={emergency}\n                onSelect={() => handleEmergencySelect(emergency)}\n                onAcknowledge={() => acknowledgeEmergency(emergency.id)}\n                onEnroute={() => startEnroute(emergency.id)}\n                onArrived={() => markArrived(emergency.id)}\n                onPrepare={() => startPreparation(emergency.id)}\n                showActions={showActions}\n                isSelected={activeEmergencyId === emergency.id}\n              />\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9587},"client/src/views/AmbulanceView.tsx":{"content":"import { useAI4HStore, startETACountdown, stopETACountdown } from \"../store/ai4h-store\";\nimport { Timeline } from \"../components/Timeline\";\nimport { StatusChip } from \"../components/StatusChip\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useEffect } from \"react\";\n\nexport function AmbulanceView() {\n  const { \n    status, \n    patient, \n    geo, \n    etaMin, \n    history, \n    acknowledgeEmergency, \n    startEnroute, \n    markArrived \n  } = useAI4HStore();\n\n  useEffect(() => {\n    if (status === \"ENROUTE\") {\n      startETACountdown();\n    } else {\n      stopETACountdown();\n    }\n\n    return () => stopETACountdown();\n  }, [status]);\n\n  if (!patient || !status) {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"ambulance-view\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"text-6xl mb-4\">🚑</div>\n            <h2 className=\"text-2xl font-semibold mb-4\">Waiting for Emergency Alerts</h2>\n            <p className=\"text-muted-foreground\">\n              Emergency notifications will appear here when triggered\n            </p>\n          </CardContent>\n        </Card>\n      </main>\n    );\n  }\n\n  const progressValue = status === \"NEW\" ? 25 : status === \"ACK\" ? 50 : status === \"ENROUTE\" ? 75 : 100;\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"ambulance-view\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Emergency Alert Card */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-red-50 border-2 border-red-200 rounded-xl p-6 mb-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-xl font-bold text-red-800\">🚨 INCOMING EMERGENCY</h2>\n              <StatusChip status={status} />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Patient Information</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Name:</span>\n                    <span className=\"font-medium\" data-testid=\"patient-name\">{patient.name}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Age:</span>\n                    <span className=\"font-medium\" data-testid=\"patient-age\">{patient.age} years</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Blood Type:</span>\n                    <span className=\"font-medium text-red-600\" data-testid=\"patient-blood\">{patient.blood}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Conditions:</span>\n                    <span className=\"font-medium\" data-testid=\"patient-conditions\">\n                      {patient.conditions.join(\", \")}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Allergies:</span>\n                    <span className=\"font-medium text-red-600\" data-testid=\"patient-allergies\">\n                      {patient.allergies.join(\", \")}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Location & Contact</h3>\n                <div className=\"space-y-2\">\n                  <div>\n                    <span className=\"text-gray-600\">Location:</span>\n                    <p className=\"font-medium\" data-testid=\"patient-location\">\n                      {geo?.address || \"Location not available\"}\n                    </p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Emergency Contact:</span>\n                    <p className=\"font-medium\" data-testid=\"guardian-name\">{patient.guardian.name}</p>\n                    <p className=\"text-blue-600\" data-testid=\"guardian-phone\">{patient.guardian.phone}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">ETA:</span>\n                    <p className=\"font-bold text-lg text-red-600\" data-testid=\"eta-minutes\">\n                      {etaMin ? `${etaMin} minutes` : \"Calculating...\"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Progress Bar */}\n            <div className=\"mt-6\">\n              <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n                <span>Response Progress</span>\n                <span data-testid=\"progress-percentage\">{progressValue}%</span>\n              </div>\n              <Progress value={progressValue} className=\"h-2\" />\n            </div>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button\n              onClick={acknowledgeEmergency}\n              disabled={status !== \"NEW\"}\n              className=\"bg-amber-500 hover:bg-amber-600 text-white font-semibold py-3\"\n              data-testid=\"button-acknowledge\"\n            >\n              <i className=\"fas fa-check mr-2\"></i>\n              Acknowledge\n            </Button>\n            <Button\n              onClick={startEnroute}\n              disabled={status !== \"ACK\"}\n              className=\"bg-sky-600 hover:bg-sky-700 text-white font-semibold py-3\"\n              data-testid=\"button-enroute\"\n            >\n              <i className=\"fas fa-route mr-2\"></i>\n              Start En-Route\n            </Button>\n            <Button\n              onClick={markArrived}\n              disabled={status !== \"ENROUTE\"}\n              className=\"bg-green-600 hover:bg-green-700 text-white font-semibold py-3\"\n              data-testid=\"button-arrived\"\n            >\n              <i className=\"fas fa-map-marker-alt mr-2\"></i>\n              Mark Arrived\n            </Button>\n          </div>\n        </div>\n        \n        {/* Status Panel */}\n        <div className=\"space-y-6\">\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold text-foreground mb-4\">Current Status</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Alert Received</span>\n                  <i className=\"fas fa-check-circle text-green-600\" data-testid=\"status-received\"></i>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Acknowledged</span>\n                  <i className={`fas ${status === \"NEW\" ? \"fa-clock text-gray-400\" : \"fa-check-circle text-green-600\"}`} \n                     data-testid=\"status-acknowledged\"></i>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">En Route</span>\n                  <i className={`fas ${[\"NEW\", \"ACK\"].includes(status) ? \"fa-clock text-gray-400\" : \"fa-check-circle text-green-600\"}`}\n                     data-testid=\"status-enroute\"></i>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Arrived</span>\n                  <i className={`fas ${status !== \"ARRIVED\" ? \"fa-clock text-gray-400\" : \"fa-check-circle text-green-600\"}`}\n                     data-testid=\"status-arrived\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Quick Actions */}\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold text-foreground mb-4\">Quick Actions</h3>\n              <div className=\"space-y-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start bg-blue-50 border-blue-200 text-blue-800 hover:bg-blue-100\"\n                  data-testid=\"button-call-patient\"\n                >\n                  <i className=\"fas fa-phone mr-2\"></i>\n                  Call Patient\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start bg-purple-50 border-purple-200 text-purple-800 hover:bg-purple-100\"\n                  data-testid=\"button-contact-hospital\"\n                >\n                  <i className=\"fas fa-hospital mr-2\"></i>\n                  Contact Hospital\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start bg-green-50 border-green-200 text-green-800 hover:bg-green-100\"\n                  data-testid=\"button-navigation\"\n                >\n                  <i className=\"fas fa-map mr-2\"></i>\n                  Open Navigation\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      \n      {/* Timeline */}\n      <div className=\"mt-8\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-lg font-semibold text-foreground mb-4\">Response Timeline</h2>\n            <Timeline history={history} />\n          </CardContent>\n        </Card>\n      </div>\n    </main>\n  );\n}\n","size_bytes":9905},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"README.md":{"content":"# mind-garden","size_bytes":13},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"client/src/views/CreateEmergencyDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useMultiEmergencyStore, type CreateEmergencyData } from \"../store/multi-emergency-store\";\nimport { demoPatient } from \"../types\";\nimport { toast } from \"../utils/notify\";\n\ninterface CreateEmergencyDialogProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nconst emergencyTypes = [\n  { value: \"cardiac-arrest\", label: \"Cardiac Arrest\", severity: \"critical\" },\n  { value: \"heart-attack\", label: \"Heart Attack\", severity: \"critical\" },\n  { value: \"stroke\", label: \"Stroke\", severity: \"critical\" },\n  { value: \"respiratory-failure\", label: \"Respiratory Failure\", severity: \"critical\" },\n  { value: \"severe-trauma\", label: \"Severe Trauma\", severity: \"critical\" },\n  { value: \"chest-pain\", label: \"Chest Pain\", severity: \"urgent\" },\n  { value: \"difficulty-breathing\", label: \"Difficulty Breathing\", severity: \"urgent\" },\n  { value: \"severe-bleeding\", label: \"Severe Bleeding\", severity: \"urgent\" },\n  { value: \"head-injury\", label: \"Head Injury\", severity: \"urgent\" },\n  { value: \"seizure\", label: \"Seizure\", severity: \"urgent\" },\n  { value: \"allergic-reaction\", label: \"Severe Allergic Reaction\", severity: \"urgent\" },\n  { value: \"overdose\", label: \"Drug Overdose\", severity: \"urgent\" },\n  { value: \"burn\", label: \"Severe Burn\", severity: \"standard\" },\n  { value: \"fracture\", label: \"Fracture\", severity: \"standard\" },\n  { value: \"fall\", label: \"Fall Injury\", severity: \"standard\" },\n  { value: \"accident\", label: \"Motor Vehicle Accident\", severity: \"standard\" },\n  { value: \"other\", label: \"Other Emergency\", severity: \"standard\" }\n];\n\nconst locations = [\n  { label: \"Koramangala, Bangalore\", lat: 12.9279, lon: 77.6271 },\n  { label: \"MG Road, Bangalore\", lat: 12.9716, lon: 77.5946 },\n  { label: \"Electronic City, Bangalore\", lat: 12.8456, lon: 77.6603 },\n  { label: \"Whitefield, Bangalore\", lat: 12.9698, lon: 77.7500 },\n  { label: \"Indiranagar, Bangalore\", lat: 12.9719, lon: 77.6412 },\n  { label: \"Custom Location\", lat: 0, lon: 0 }\n];\n\nexport function CreateEmergencyDialog({ open, onClose }: CreateEmergencyDialogProps) {\n  const { createEmergency } = useMultiEmergencyStore();\n  \n  const [formData, setFormData] = useState({\n    type: \"\",\n    locationIndex: 0,\n    customLat: \"\",\n    customLon: \"\",\n    customAddress: \"\",\n    vitals: {\n      hr: \"\",\n      spo2: \"\",\n      sbp: \"\",\n      rr: \"\",\n      gcs: \"\"\n    }\n  });\n  \n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showVitals, setShowVitals] = useState(false);\n\n  const selectedEmergencyType = emergencyTypes.find(t => t.value === formData.type);\n  const selectedLocation = locations[formData.locationIndex];\n  const isCustomLocation = formData.locationIndex === locations.length - 1;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.type) return;\n    \n    setIsSubmitting(true);\n    \n    try {\n      // Prepare location data\n      let locationData;\n      if (isCustomLocation) {\n        locationData = {\n          lat: parseFloat(formData.customLat) || 12.9716,\n          lon: parseFloat(formData.customLon) || 77.5946,\n          address: formData.customAddress || \"Custom Location\"\n        };\n      } else {\n        locationData = {\n          lat: selectedLocation.lat,\n          lon: selectedLocation.lon,\n          address: selectedLocation.label\n        };\n      }\n\n      // Prepare vitals data\n      const vitals = Object.entries(formData.vitals)\n        .reduce((acc, [key, value]) => {\n          if (value && !isNaN(parseFloat(value))) {\n            acc[key as keyof typeof formData.vitals] = parseFloat(value);\n          }\n          return acc;\n        }, {} as any);\n\n      const emergencyData: CreateEmergencyData = {\n        patientId: `patient-${Date.now()}`,\n        patient: { \n          ...demoPatient, \n          id: `patient-${Date.now()}`,\n          name: `${demoPatient.name} #${Math.floor(Math.random() * 1000)}`\n        },\n        type: selectedEmergencyType?.label || formData.type,\n        location: locationData,\n        vitals: Object.keys(vitals).length > 0 ? vitals : undefined\n      };\n\n      const emergencyId = await createEmergency(emergencyData);\n      \n      toast(\"Emergency Created\", \"success\");\n      onClose();\n      resetForm();\n      \n    } catch (error) {\n      console.error(\"Failed to create emergency:\", error);\n      toast(\"Failed to create emergency\", \"error\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      type: \"\",\n      locationIndex: 0,\n      customLat: \"\",\n      customLon: \"\",\n      customAddress: \"\",\n      vitals: {\n        hr: \"\",\n        spo2: \"\",\n        sbp: \"\",\n        rr: \"\",\n        gcs: \"\"\n      }\n    });\n    setShowVitals(false);\n  };\n\n  const handleClose = () => {\n    onClose();\n    resetForm();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"create-emergency-dialog\">\n        <DialogHeader>\n          <DialogTitle>Create New Emergency</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Emergency Type */}\n          <div className=\"space-y-3\">\n            <Label htmlFor=\"emergency-type\">Emergency Type *</Label>\n            <Select value={formData.type} onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}>\n              <SelectTrigger data-testid=\"select-emergency-type\">\n                <SelectValue placeholder=\"Select emergency type...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {emergencyTypes.map((type) => (\n                  <SelectItem key={type.value} value={type.value}>\n                    <div className=\"flex items-center justify-between w-full\">\n                      <span>{type.label}</span>\n                      <Badge \n                        variant=\"outline\" \n                        className={`ml-2 text-xs ${\n                          type.severity === 'critical' ? 'border-red-200 text-red-800' :\n                          type.severity === 'urgent' ? 'border-yellow-200 text-yellow-800' :\n                          'border-gray-200 text-gray-800'\n                        }`}\n                      >\n                        {type.severity}\n                      </Badge>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {selectedEmergencyType && (\n              <div className=\"text-sm text-muted-foreground\">\n                Severity: <Badge \n                  variant=\"outline\" \n                  className={`${\n                    selectedEmergencyType.severity === 'critical' ? 'border-red-200 text-red-800' :\n                    selectedEmergencyType.severity === 'urgent' ? 'border-yellow-200 text-yellow-800' :\n                    'border-gray-200 text-gray-800'\n                  }`}\n                >\n                  {selectedEmergencyType.severity}\n                </Badge>\n              </div>\n            )}\n          </div>\n\n          {/* Location */}\n          <div className=\"space-y-3\">\n            <Label htmlFor=\"location\">Location *</Label>\n            <Select \n              value={formData.locationIndex.toString()} \n              onValueChange={(value) => setFormData(prev => ({ ...prev, locationIndex: parseInt(value) }))}\n            >\n              <SelectTrigger data-testid=\"select-location\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {locations.map((location, index) => (\n                  <SelectItem key={index} value={index.toString()}>\n                    {location.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            {isCustomLocation && (\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <Label htmlFor=\"custom-lat\" className=\"text-sm\">Latitude</Label>\n                  <Input\n                    id=\"custom-lat\"\n                    type=\"number\"\n                    step=\"any\"\n                    placeholder=\"12.9716\"\n                    value={formData.customLat}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      customLat: e.target.value \n                    }))}\n                    data-testid=\"input-custom-lat\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"custom-lon\" className=\"text-sm\">Longitude</Label>\n                  <Input\n                    id=\"custom-lon\"\n                    type=\"number\"\n                    step=\"any\"\n                    placeholder=\"77.5946\"\n                    value={formData.customLon}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      customLon: e.target.value \n                    }))}\n                    data-testid=\"input-custom-lon\"\n                  />\n                </div>\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"custom-address\" className=\"text-sm\">Address</Label>\n                  <Input\n                    id=\"custom-address\"\n                    placeholder=\"Street address...\"\n                    value={formData.customAddress}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      customAddress: e.target.value \n                    }))}\n                    data-testid=\"input-custom-address\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Vitals (Optional) */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-sm\">Vital Signs (Optional)</CardTitle>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowVitals(!showVitals)}\n                  data-testid=\"toggle-vitals\"\n                >\n                  {showVitals ? \"Hide\" : \"Add\"} Vitals\n                </Button>\n              </div>\n            </CardHeader>\n            {showVitals && (\n              <CardContent className=\"pt-0\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"hr\" className=\"text-sm\">Heart Rate (bpm)</Label>\n                    <Input\n                      id=\"hr\"\n                      type=\"number\"\n                      placeholder=\"80\"\n                      value={formData.vitals.hr}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        vitals: { ...prev.vitals, hr: e.target.value }\n                      }))}\n                      data-testid=\"input-hr\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"spo2\" className=\"text-sm\">SpO2 (%)</Label>\n                    <Input\n                      id=\"spo2\"\n                      type=\"number\"\n                      placeholder=\"98\"\n                      value={formData.vitals.spo2}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        vitals: { ...prev.vitals, spo2: e.target.value }\n                      }))}\n                      data-testid=\"input-spo2\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"sbp\" className=\"text-sm\">Blood Pressure (mmHg)</Label>\n                    <Input\n                      id=\"sbp\"\n                      type=\"number\"\n                      placeholder=\"120\"\n                      value={formData.vitals.sbp}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        vitals: { ...prev.vitals, sbp: e.target.value }\n                      }))}\n                      data-testid=\"input-sbp\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"gcs\" className=\"text-sm\">Glasgow Coma Scale</Label>\n                    <Input\n                      id=\"gcs\"\n                      type=\"number\"\n                      min=\"3\"\n                      max=\"15\"\n                      placeholder=\"15\"\n                      value={formData.vitals.gcs}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        vitals: { ...prev.vitals, gcs: e.target.value }\n                      }))}\n                      data-testid=\"input-gcs\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            )}\n          </Card>\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={isSubmitting}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!formData.type || isSubmitting}\n              data-testid=\"button-create\"\n            >\n              {isSubmitting ? \"Creating...\" : \"Create Emergency\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14034},"server/logic/triage.ts":{"content":"import type { TriageLevel, HospitalCapability } from '@shared/schema';\n\nexport interface Vitals {\n  hr?: number;    // Heart rate\n  spo2?: number;  // Oxygen saturation\n  sbp?: number;   // Systolic blood pressure  \n  rr?: number;    // Respiratory rate\n  gcs?: number;   // Glasgow Coma Scale\n}\n\nexport interface TriageResult {\n  score: number;        // 0-100\n  level: TriageLevel;   // red/yellow/green\n  reason: string;\n  needs: HospitalCapability[];\n}\n\n/**\n * Calculate triage score based on vital signs using rule-based algorithm\n * Returns score 0-100 with higher scores indicating more critical conditions\n */\nexport function triageScore(vitals: Vitals, emergencyType?: string): TriageResult {\n  let score = 0;\n  let reasons: string[] = [];\n  let needs: Set<HospitalCapability> = new Set();\n\n  // Heart Rate scoring (normal: 60-100)\n  if (vitals.hr !== undefined) {\n    if (vitals.hr > 140 || vitals.hr < 40) {\n      score += 25;\n      reasons.push('Critical heart rate');\n      needs.add('ICU');\n      needs.add('Cardio');\n    } else if (vitals.hr > 120 || vitals.hr < 50) {\n      score += 15;\n      reasons.push('Abnormal heart rate');\n      needs.add('Cardio');\n    } else if (vitals.hr > 100 || vitals.hr < 60) {\n      score += 5;\n      reasons.push('Elevated heart rate');\n    }\n  }\n\n  // Oxygen Saturation scoring (normal: >95%)\n  if (vitals.spo2 !== undefined) {\n    if (vitals.spo2 < 85) {\n      score += 30;\n      reasons.push('Critical oxygen levels');\n      needs.add('ICU');\n      needs.add('Ventilator');\n    } else if (vitals.spo2 < 92) {\n      score += 20;\n      reasons.push('Low oxygen saturation');\n      needs.add('Ventilator');\n    } else if (vitals.spo2 < 95) {\n      score += 10;\n      reasons.push('Mild oxygen desaturation');\n    }\n  }\n\n  // Blood Pressure scoring (normal systolic: 90-140)\n  if (vitals.sbp !== undefined) {\n    if (vitals.sbp > 180 || vitals.sbp < 70) {\n      score += 20;\n      reasons.push('Critical blood pressure');\n      needs.add('ICU');\n      needs.add('Cardio');\n    } else if (vitals.sbp > 160 || vitals.sbp < 90) {\n      score += 10;\n      reasons.push('Abnormal blood pressure');\n      needs.add('Cardio');\n    }\n  }\n\n  // Respiratory Rate scoring (normal: 12-20)\n  if (vitals.rr !== undefined) {\n    if (vitals.rr > 35 || vitals.rr < 8) {\n      score += 25;\n      reasons.push('Critical respiratory distress');\n      needs.add('ICU');\n      needs.add('Ventilator');\n    } else if (vitals.rr > 25 || vitals.rr < 10) {\n      score += 15;\n      reasons.push('Respiratory distress');\n      needs.add('Ventilator');\n    } else if (vitals.rr > 20 || vitals.rr < 12) {\n      score += 5;\n      reasons.push('Mild respiratory changes');\n    }\n  }\n\n  // Glasgow Coma Scale scoring (normal: 15)\n  if (vitals.gcs !== undefined) {\n    if (vitals.gcs < 9) {\n      score += 30;\n      reasons.push('Severe neurological impairment');\n      needs.add('ICU');\n      needs.add('Neuro');\n      needs.add('Ventilator');\n    } else if (vitals.gcs < 13) {\n      score += 20;\n      reasons.push('Moderate neurological impairment');\n      needs.add('Neuro');\n    } else if (vitals.gcs < 15) {\n      score += 10;\n      reasons.push('Mild neurological changes');\n      needs.add('Neuro');\n    }\n  }\n\n  // Emergency type-based needs inference\n  if (emergencyType) {\n    const typeNeeds = inferNeedsFromType(emergencyType);\n    typeNeeds.forEach(need => needs.add(need));\n    \n    // Add additional score based on emergency type severity\n    const typeSeverity = getTypeSeverity(emergencyType);\n    score += typeSeverity;\n    \n    if (typeSeverity > 0) {\n      reasons.push(`${emergencyType} emergency`);\n    }\n  }\n\n  // Cap score at 100\n  score = Math.min(score, 100);\n\n  // Determine triage level\n  let level: TriageLevel;\n  if (score >= 70) {\n    level = 'red';    // Critical\n  } else if (score >= 30) {\n    level = 'yellow'; // Urgent\n  } else {\n    level = 'green';  // Stable\n  }\n\n  return {\n    score,\n    level,\n    reason: reasons.length > 0 ? reasons.join('; ') : 'Normal vitals',\n    needs: Array.from(needs)\n  };\n}\n\n/**\n * Infer hospital capabilities needed based on emergency type\n */\nfunction inferNeedsFromType(emergencyType: string): HospitalCapability[] {\n  const type = emergencyType.toLowerCase();\n  const needs: HospitalCapability[] = [];\n\n  // Cardiac emergencies\n  if (type.includes('cardiac') || type.includes('heart') || type.includes('chest pain')) {\n    needs.push('Cardio', 'ICU');\n  }\n\n  // Respiratory emergencies\n  if (type.includes('respiratory') || type.includes('asthma') || type.includes('breathing')) {\n    needs.push('Ventilator');\n  }\n\n  // Neurological emergencies\n  if (type.includes('stroke') || type.includes('seizure') || type.includes('head') || type.includes('neurological')) {\n    needs.push('Neuro', 'ICU');\n  }\n\n  // Pediatric cases\n  if (type.includes('pediatric') || type.includes('child') || type.includes('infant')) {\n    needs.push('Peds');\n  }\n\n  // Trauma cases\n  if (type.includes('trauma') || type.includes('accident') || type.includes('injury')) {\n    needs.push('ICU');\n  }\n\n  // Severe/critical keywords\n  if (type.includes('critical') || type.includes('severe') || type.includes('emergency')) {\n    needs.push('ICU');\n  }\n\n  return needs;\n}\n\n/**\n * Get severity score based on emergency type (0-30 points)\n */\nfunction getTypeSeverity(emergencyType: string): number {\n  const type = emergencyType.toLowerCase();\n\n  // Critical conditions (20-30 points)\n  if (type.includes('cardiac arrest') || type.includes('stroke') || type.includes('severe trauma')) {\n    return 30;\n  }\n  \n  if (type.includes('heart attack') || type.includes('respiratory failure') || type.includes('severe bleeding')) {\n    return 25;\n  }\n\n  if (type.includes('chest pain') || type.includes('difficulty breathing') || type.includes('head injury')) {\n    return 20;\n  }\n\n  // Urgent conditions (10-19 points)\n  if (type.includes('asthma') || type.includes('seizure') || type.includes('severe pain')) {\n    return 15;\n  }\n\n  if (type.includes('allergic reaction') || type.includes('overdose') || type.includes('burn')) {\n    return 10;\n  }\n\n  // Standard emergencies (0-9 points)\n  if (type.includes('injury') || type.includes('fall') || type.includes('accident')) {\n    return 5;\n  }\n\n  return 0;\n}\n\n/**\n * Placeholder for future ML-based scoring\n * Currently returns rule-based score\n */\nexport function mlScore(vitals: Vitals, emergencyType?: string): TriageResult {\n  // TODO: Implement machine learning model integration\n  // For now, return rule-based score\n  return triageScore(vitals, emergencyType);\n}","size_bytes":6573},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/App.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAI4HStore } from \"./store/ai4h-store\";\nimport { TabBar } from \"./components/TabBar\";\nimport { UserView } from \"./views/UserView\";\nimport { EnhancedAmbulanceView } from \"./views/EnhancedAmbulanceView\";\nimport { HospitalView } from \"./views/HospitalView\";\nimport { HospitalCapacityConsole } from \"./views/HospitalCapacityConsole\";\nimport { AdminDashboard } from \"./views/AdminDashboard\";\nimport { loadLastTab } from \"./utils/bus\";\nimport type { TabType } from \"./types\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\n\nfunction App() {\n  const [activeTab, setActiveTab] = useState<TabType>(\"user\");\n  const initializeStore = useAI4HStore((state) => state.initializeStore);\n\n  useEffect(() => {\n    // Initialize the store and load persisted state\n    initializeStore();\n    \n    // Load last active tab\n    const lastTab = loadLastTab();\n    setActiveTab(lastTab as TabType);\n\n    // Request notification permission\n    if (\"Notification\" in window && Notification.permission === \"default\") {\n      Notification.requestPermission();\n    }\n  }, [initializeStore]);\n\n  const renderView = () => {\n    switch (activeTab) {\n      case \"user\":\n        return <UserView />;\n      case \"ambulance\":\n        return <EnhancedAmbulanceView />;\n      case \"hospital\":\n        return <HospitalCapacityConsole />;\n      case \"admin\":\n        return <AdminDashboard />;\n      default:\n        return <UserView />;\n    }\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          {/* Header */}\n          <header className=\"bg-card border-b border-border shadow-sm\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-red-600 p-2 rounded-lg\">\n                    <i className=\"fas fa-heartbeat text-white text-xl\"></i>\n                  </div>\n                  <div>\n                    <h1 className=\"text-xl font-bold text-foreground\">AI4Health Emergency</h1>\n                    <p className=\"text-sm text-muted-foreground\">Real-time Emergency Response System</p>\n                  </div>\n                </div>\n                \n                {/* Status Indicator */}\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" data-testid=\"status-live\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Live</span>\n                </div>\n              </div>\n            </div>\n          </header>\n\n          {/* Tab Navigation */}\n          <TabBar activeTab={activeTab} onTabChange={setActiveTab} />\n\n          {/* Main Content */}\n          {renderView()}\n        </div>\n        \n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3190},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { selectRepo } from \"./repo/selectRepo\";\nimport { triageScore } from \"./logic/triage\";\nimport { pickHospital, findAlternativeRoute } from \"./logic/routing\";\nimport { insertEmergencySchema } from \"@shared/schema\";\nimport type { Emergency, HospitalCapability } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const repo = selectRepo();\n\n  // Emergency routes with enhanced functionality\n  app.get(\"/api/emergencies\", async (req, res) => {\n    try {\n      // Maintain backward compatibility - return legacy format by default\n      const legacyEmergencies = await storage.getAllEmergencies();\n      res.json(legacyEmergencies);\n    } catch (error) {\n      console.error('Error fetching emergencies:', error);\n      res.status(500).json({ message: \"Failed to fetch emergencies\" });\n    }\n  });\n\n  // New endpoint for enhanced emergencies with filtering\n  app.get(\"/api/emergencies/enhanced\", async (req, res) => {\n    try {\n      const { status, triage_level, needs } = req.query;\n      \n      const filter: any = {};\n      if (status) filter.status = Array.isArray(status) ? status : [status];\n      if (triage_level) filter.triage_level = Array.isArray(triage_level) ? triage_level : [triage_level];\n      if (needs) filter.needs = Array.isArray(needs) ? needs : [needs];\n\n      const emergencies = await repo.listEmergencies(filter);\n      res.json(emergencies);\n    } catch (error) {\n      console.error('Error fetching enhanced emergencies:', error);\n      res.status(500).json({ message: \"Failed to fetch enhanced emergencies\" });\n    }\n  });\n\n  app.get(\"/api/emergencies/:id\", async (req, res) => {\n    try {\n      const emergency = await storage.getEmergency(req.params.id);\n      if (!emergency) {\n        return res.status(404).json({ message: \"Emergency not found\" });\n      }\n      res.json(emergency);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch emergency\" });\n    }\n  });\n\n  app.post(\"/api/emergencies\", async (req, res) => {\n    try {\n      const validatedData = insertEmergencySchema.parse(req.body);\n      \n      // Create emergency using old storage for backward compatibility\n      const legacyEmergency = await storage.createEmergency(validatedData);\n      \n      // Also create using enhanced system if data supports it\n      let enhancedEmergency = null;\n      if (req.body.enhanced && req.body.lat && req.body.lon && req.body.patient_id) {\n        const { lat, lon, patient_id, type, vitals } = req.body;\n        \n        // Calculate triage score\n        const triage = triageScore(vitals || {}, type);\n        \n        const newEmergency = {\n          patient_id,\n          lat: parseFloat(lat),\n          lon: parseFloat(lon),\n          type: type || 'Unknown',\n          needs: triage.needs,\n          triage_score: triage.score,\n          vitals: vitals || null\n        };\n        \n        enhancedEmergency = await repo.createEmergency(newEmergency);\n        \n        // Add creation incident event\n        await repo.addIncidentEvent({\n          id: randomUUID(),\n          emergency_id: enhancedEmergency.id,\n          kind: 'created',\n          data: { triage, routing_attempted: false },\n          ts: new Date()\n        });\n        \n        // Attempt hospital routing\n        try {\n          const hospitals = await repo.listHospitals();\n          const routing = pickHospital(enhancedEmergency as any, hospitals as any);\n          \n          if (routing.primary && routing.primary.available) {\n            await repo.updateEmergency(enhancedEmergency.id, {\n              assigned_hospital_id: routing.primary.hospital.id,\n              assigned_eta_min: routing.primary.eta,\n              status: 'assigned'\n            });\n            \n            // Log assignment\n            await repo.addIncidentEvent({\n              id: randomUUID(),\n              emergency_id: enhancedEmergency.id,\n              kind: 'assigned',\n              data: { hospital: routing.primary.hospital, eta: routing.primary.eta },\n              ts: new Date()\n            });\n          }\n          \n          await repo.addIncidentEvent({\n            id: randomUUID(),\n            emergency_id: enhancedEmergency.id,\n            kind: 'triage',\n            data: { routing_result: routing },\n            ts: new Date()\n          });\n        } catch (routingError) {\n          console.warn('Hospital routing failed:', routingError);\n        }\n      }\n      \n      // Maintain backward compatibility - return only the legacy emergency\n      res.status(201).json(legacyEmergency);\n    } catch (error) {\n      console.error('Emergency creation error:', error);\n      res.status(400).json({ message: \"Invalid emergency data\", error });\n    }\n  });\n\n  app.patch(\"/api/emergencies/:id\", async (req, res) => {\n    try {\n      const partialData = insertEmergencySchema.partial().parse(req.body);\n      const emergency = await storage.updateEmergency(req.params.id, partialData);\n      if (!emergency) {\n        return res.status(404).json({ message: \"Emergency not found\" });\n      }\n      res.json(emergency);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid emergency data\", error });\n    }\n  });\n\n  // Enhanced emergency creation endpoint with triage and routing\n  app.post(\"/api/emergencies/enhanced\", async (req, res) => {\n    try {\n      // Validate enhanced emergency data\n      const { patient_id, lat, lon, type, vitals, needs } = req.body;\n      \n      if (!patient_id || !lat || !lon || !type) {\n        return res.status(400).json({ message: \"Missing required fields: patient_id, lat, lon, type\" });\n      }\n\n      // Calculate triage score\n      const triage = triageScore(vitals || {}, type);\n      \n      const newEmergency = {\n        patient_id,\n        lat: parseFloat(lat),\n        lon: parseFloat(lon),\n        type,\n        needs: needs || triage.needs,\n        triage_score: triage.score,\n        vitals: vitals || null\n      };\n      \n      const enhancedEmergency = await repo.createEmergency(newEmergency);\n      \n      // Add creation incident event\n      await repo.addIncidentEvent({\n        id: randomUUID(),\n        emergency_id: enhancedEmergency.id,\n        kind: 'created',\n        data: { triage, routing_attempted: false },\n        ts: new Date()\n      });\n      \n      // Attempt hospital routing\n      try {\n        const hospitals = await repo.listHospitals();\n        const routing = pickHospital(enhancedEmergency as any, hospitals as any);\n        \n        if (routing.primary && routing.primary.available) {\n          await repo.updateEmergency(enhancedEmergency.id, {\n            assigned_hospital_id: routing.primary.hospital.id,\n            assigned_eta_min: routing.primary.eta,\n            status: 'assigned'\n          });\n          \n          // Log assignment\n          await repo.addIncidentEvent({\n            id: randomUUID(),\n            emergency_id: enhancedEmergency.id,\n            kind: 'assigned',\n            data: { hospital: routing.primary.hospital, eta: routing.primary.eta },\n            ts: new Date()\n          });\n        }\n        \n        await repo.addIncidentEvent({\n          id: randomUUID(),\n          emergency_id: enhancedEmergency.id,\n          kind: 'triage',\n          data: { routing_result: routing },\n          ts: new Date()\n        });\n      } catch (routingError) {\n        console.warn('Hospital routing failed:', routingError);\n      }\n      \n      res.status(201).json(enhancedEmergency);\n    } catch (error) {\n      console.error('Enhanced emergency creation error:', error);\n      res.status(400).json({ message: \"Invalid enhanced emergency data\", error });\n    }\n  });\n\n  // Enhanced API endpoints\n  app.get(\"/api/hospitals\", async (req, res) => {\n    try {\n      const hospitals = await repo.listHospitals();\n      res.json(hospitals);\n    } catch (error) {\n      console.error('Error fetching hospitals:', error);\n      res.status(500).json({ message: \"Failed to fetch hospitals\" });\n    }\n  });\n  \n  app.get(\"/api/emergencies/:id/timeline\", async (req, res) => {\n    try {\n      const events = await repo.listIncidentEvents(req.params.id);\n      res.json(events);\n    } catch (error) {\n      console.error('Error fetching timeline:', error);\n      res.status(500).json({ message: \"Failed to fetch incident timeline\" });\n    }\n  });\n  \n  app.post(\"/api/emergencies/:id/reroute\", async (req, res) => {\n    try {\n      const emergency = await repo.getEmergency(req.params.id);\n      if (!emergency) {\n        return res.status(404).json({ message: \"Emergency not found\" });\n      }\n      \n      const hospitals = await repo.listHospitals();\n      const excludeIds = emergency.assigned_hospital_id ? [emergency.assigned_hospital_id] : [];\n      \n      const rerouting = findAlternativeRoute(emergency as any, hospitals as any, excludeIds);\n      \n      if (rerouting.primary && rerouting.primary.available) {\n        await repo.updateEmergency(req.params.id, {\n          rerouted_to_id: rerouting.primary.hospital.id,\n          assigned_eta_min: rerouting.primary.eta,\n          status: 'assigned'\n        });\n        \n        await repo.addIncidentEvent({\n          id: randomUUID(),\n          emergency_id: req.params.id,\n          kind: 'reroute',\n          data: {\n            from_hospital_id: emergency.assigned_hospital_id,\n            to_hospital: rerouting.primary.hospital,\n            reason: req.body.reason || 'Manual reroute',\n            eta: rerouting.primary.eta\n          },\n          ts: new Date()\n        });\n        \n        res.json({ success: true, hospital: rerouting.primary.hospital, eta: rerouting.primary.eta });\n      } else {\n        res.status(400).json({ message: \"No alternative hospitals available\", routing: rerouting });\n      }\n    } catch (error) {\n      console.error('Reroute error:', error);\n      res.status(500).json({ message: \"Failed to reroute emergency\" });\n    }\n  });\n  \n  app.get(\"/api/admin/dashboard\", async (req, res) => {\n    try {\n      const emergencies = await repo.listEmergencies();\n      const hospitals = await repo.listHospitals();\n      \n      // Calculate stats\n      const stats = {\n        total_emergencies: emergencies.length,\n        active: emergencies.filter(e => e.status === 'active').length,\n        assigned: emergencies.filter(e => e.status === 'assigned').length,\n        enroute: emergencies.filter(e => e.status === 'enroute').length,\n        completed: emergencies.filter(e => e.status === 'completed').length,\n        hospitals_count: hospitals.length,\n        hospitals_accepting: hospitals.filter(h => h.accepting_emergencies).length\n      };\n      \n      res.json({\n        stats,\n        emergencies: emergencies.slice(0, 50), // Latest 50 \n        hospitals: hospitals\n      });\n    } catch (error) {\n      console.error('Dashboard error:', error);\n      res.status(500).json({ message: \"Failed to load dashboard data\" });\n    }\n  });\n\n  // Hospital management routes\n  app.get(\"/api/hospitals\", async (req, res) => {\n    try {\n      const hospitals = await repo.listHospitals();\n      res.json(hospitals);\n    } catch (error) {\n      console.error('Error fetching hospitals:', error);\n      res.status(500).json({ message: \"Failed to fetch hospitals\" });\n    }\n  });\n\n  app.get(\"/api/hospitals/:id\", async (req, res) => {\n    try {\n      const hospital = await repo.getHospital(req.params.id);\n      if (!hospital) {\n        return res.status(404).json({ message: \"Hospital not found\" });\n      }\n      res.json(hospital);\n    } catch (error) {\n      console.error('Error fetching hospital:', error);\n      res.status(500).json({ message: \"Failed to fetch hospital\" });\n    }\n  });\n\n  app.patch(\"/api/hospitals/:id\", async (req, res) => {\n    try {\n      const hospital = await repo.getHospital(req.params.id);\n      if (!hospital) {\n        return res.status(404).json({ message: \"Hospital not found\" });\n      }\n\n      const updates = {\n        beds_available: req.body.bedsAvailable,\n        doctors_available: req.body.doctorsAvailable,\n        capabilities: req.body.capabilities,\n        accepting_emergencies: req.body.acceptingEmergencies\n      };\n\n      await repo.upsertHospital({ ...hospital, ...updates });\n      const updated = await repo.getHospital(req.params.id);\n      \n      res.json(updated);\n    } catch (error) {\n      console.error('Error updating hospital:', error);\n      res.status(500).json({ message: \"Failed to update hospital\" });\n    }\n  });\n\n  app.post(\"/api/hospitals/:id/set-unavailable\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { emergencyId, reason } = req.body;\n      \n      const hospital = await repo.getHospital(id);\n      if (!hospital) {\n        return res.status(404).json({ message: \"Hospital not found\" });\n      }\n\n      // Mark hospital as not accepting emergencies\n      await repo.upsertHospital({ \n        ...hospital, \n        accepting_emergencies: false \n      });\n\n      // If there's an emergency assigned to this hospital, reroute it\n      if (emergencyId) {\n        const emergency = await repo.getEmergency(emergencyId);\n        if (emergency) {\n          const hospitals = await repo.listHospitals();\n          const excludeIds = [id];\n          \n          const rerouting = findAlternativeRoute(emergency as any, hospitals as any, excludeIds);\n          \n          if (rerouting.primary && rerouting.primary.available) {\n            await repo.updateEmergency(emergencyId, {\n              rerouted_to_id: rerouting.primary.hospital.id,\n              assigned_eta_min: rerouting.primary.eta,\n              status: 'assigned'\n            });\n            \n            await repo.addIncidentEvent({\n              id: randomUUID(),\n              emergency_id: emergencyId,\n              kind: 'reroute',\n              data: {\n                from_hospital_id: id,\n                to_hospital: rerouting.primary.hospital,\n                reason: reason || 'Hospital marked as unavailable',\n                eta: rerouting.primary.eta\n              },\n              ts: new Date()\n            });\n            \n            return res.json({ \n              success: true, \n              rerouted: true,\n              newHospital: rerouting.primary.hospital, \n              eta: rerouting.primary.eta \n            });\n          } else {\n            return res.json({ \n              success: true, \n              rerouted: false,\n              message: \"No alternative hospitals available\"\n            });\n          }\n        }\n      }\n\n      res.json({ success: true, rerouted: false });\n    } catch (error) {\n      console.error('Error marking hospital unavailable:', error);\n      res.status(500).json({ message: \"Failed to mark hospital unavailable\" });\n    }\n  });\n\n  app.post(\"/api/hospitals/import-csv\", async (req, res) => {\n    try {\n      const { csvData } = req.body;\n      if (!csvData) {\n        return res.status(400).json({ message: \"No CSV data provided\" });\n      }\n\n      const lines = csvData.trim().split('\\n');\n      let imported = 0;\n\n      for (const line of lines) {\n        const [name, lat, lon, beds, doctors, capabilities, accepting] = line.split(',').map(s => s.trim().replace(/\"/g, ''));\n        \n        if (!name || !lat || !lon) continue;\n\n        const hospital: Hospital = {\n          id: randomUUID(),\n          name,\n          lat: parseFloat(lat),\n          lon: parseFloat(lon),\n          beds_available: parseInt(beds) || 0,\n          doctors_available: parseInt(doctors) || 0,\n          capabilities: capabilities ? capabilities.split(';') : [],\n          accepting_emergencies: accepting?.toLowerCase() === 'true',\n          created_at: new Date()\n        };\n\n        await repo.upsertHospital(hospital);\n        imported++;\n      }\n\n      res.json({ message: `Imported ${imported} hospitals`, imported });\n    } catch (error) {\n      console.error('CSV import error:', error);\n      res.status(500).json({ message: \"Failed to import CSV data\" });\n    }\n  });\n\n  // Ambulance position tracking routes\n  app.post(\"/api/ambulance/positions\", async (req, res) => {\n    try {\n      const { positions } = req.body;\n      if (!positions || !Array.isArray(positions)) {\n        return res.status(400).json({ message: \"Invalid positions data\" });\n      }\n\n      // Save positions to database\n      const savedPositions = [];\n      for (const position of positions) {\n        if (!position.ambulanceId || !position.lat || !position.lon) {\n          continue; // Skip invalid positions\n        }\n        \n        await repo.addAmbulancePosition({\n          ambulance_id: position.ambulanceId,\n          lat: position.lat,\n          lon: position.lon,\n          ts: new Date()\n        });\n        savedPositions.push(position);\n      }\n\n      res.json({ \n        message: `Saved ${savedPositions.length} positions`,\n        positions: savedPositions \n      });\n    } catch (error) {\n      console.error('Error saving ambulance positions:', error);\n      res.status(500).json({ message: \"Failed to save positions\" });\n    }\n  });\n\n  app.get(\"/api/ambulance/positions/:ambulanceId\", async (req, res) => {\n    try {\n      const { ambulanceId } = req.params;\n      const { limit = 100 } = req.query;\n      \n      const positions = await repo.listAmbulancePositions(ambulanceId, Number(limit));\n      res.json(positions);\n    } catch (error) {\n      console.error('Error fetching ambulance positions:', error);\n      res.status(500).json({ message: \"Failed to fetch positions\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":17719},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/views/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { AlertTriangle, Plus, Activity, BarChart3, Wrench, Users } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { EmergencyQueue } from \"../components/EmergencyQueue\";\nimport { TimelineDrawer } from \"./TimelineDrawer\";\nimport { CreateEmergencyDialog } from \"./CreateEmergencyDialog\";\nimport { useMultiEmergencyStore, type EnhancedEmergency } from \"../store/multi-emergency-store\";\n\nexport function AdminDashboard() {\n  const {\n    getAllEmergencies,\n    getEmergenciesByStatus,\n    clearAllEmergencies,\n    setActiveEmergency,\n    activeEmergencyId\n  } = useMultiEmergencyStore();\n\n  const [showClearDialog, setShowClearDialog] = useState(false);\n\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [selectedEmergency, setSelectedEmergency] = useState<EnhancedEmergency | null>(null);\n  const [showTimeline, setShowTimeline] = useState(false);\n\n  // Get statistics\n  const allEmergencies = getAllEmergencies();\n  const activeCount = getEmergenciesByStatus(['active']).length;\n  const assignedCount = getEmergenciesByStatus(['assigned']).length;\n  const enrouteCount = getEmergenciesByStatus(['enroute']).length;\n  const arrivedCount = getEmergenciesByStatus(['arrived']).length;\n\n  // Triage statistics\n  const criticalCount = allEmergencies.filter(e => e.triageLevel === 'red').length;\n  const urgentCount = allEmergencies.filter(e => e.triageLevel === 'yellow').length;\n  const stableCount = allEmergencies.filter(e => e.triageLevel === 'green').length;\n\n  // Recent activity (last 10 events from all emergencies)\n  const recentActivity = allEmergencies\n    .flatMap(emergency => \n      emergency.timeline.map(event => ({\n        ...event,\n        emergencyId: emergency.id,\n        emergencyType: emergency.type\n      }))\n    )\n    .sort((a, b) => new Date(b.ts).getTime() - new Date(a.ts).getTime())\n    .slice(0, 10);\n\n  const handleEmergencySelect = (emergency: EnhancedEmergency) => {\n    setSelectedEmergency(emergency);\n    setActiveEmergency(emergency.id);\n    setShowTimeline(true);\n  };\n\n  const handleCreateEmergency = () => {\n    setShowCreateDialog(true);\n  };\n\n  const handleClearAllEmergencies = () => {\n    clearAllEmergencies();\n    setShowClearDialog(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\" data-testid=\"admin-dashboard\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground flex items-center gap-3\">\n                <Wrench className=\"w-8 h-8 text-blue-600\" />\n                Emergency Control Center\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Monitor and manage all emergency responses in real-time\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                onClick={handleCreateEmergency}\n                className=\"bg-red-600 hover:bg-red-700 text-white\"\n                data-testid=\"button-create-emergency\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Emergency\n              </Button>\n              <AlertDialog open={showClearDialog} onOpenChange={setShowClearDialog}>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    data-testid=\"button-clear-logs\"\n                  >\n                    Clear All Logs\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent data-testid=\"clear-logs-dialog\">\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Clear All Emergency Logs</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      This action cannot be undone. This will permanently delete all emergency records, \n                      patient data, timeline events, and system logs from the current session.\n                      <br /><br />\n                      <strong>All active emergencies will be lost.</strong>\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel data-testid=\"button-cancel-clear\">\n                      Cancel\n                    </AlertDialogCancel>\n                    <AlertDialogAction \n                      onClick={handleClearAllEmergencies}\n                      className=\"bg-red-600 hover:bg-red-700\"\n                      data-testid=\"button-confirm-clear\"\n                    >\n                      Clear All Logs\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Emergencies</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-total\">\n                {allEmergencies.length}\n              </div>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <Badge className=\"bg-red-100 text-red-800\" data-testid=\"stat-critical\">\n                  Critical: {criticalCount}\n                </Badge>\n                <Badge className=\"bg-yellow-100 text-yellow-800\" data-testid=\"stat-urgent\">\n                  Urgent: {urgentCount}\n                </Badge>\n                <Badge className=\"bg-green-100 text-green-800\" data-testid=\"stat-stable\">\n                  Stable: {stableCount}\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Active Response</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"stat-active\">\n                {activeCount}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Awaiting ambulance response\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">In Transit</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-transit\">\n                {assignedCount + enrouteCount}\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                <span data-testid=\"assigned-count\">{assignedCount} assigned</span>\n                {assignedCount > 0 && enrouteCount > 0 && <span> • </span>}\n                <span data-testid=\"enroute-count\">{enrouteCount} en route</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">On Scene</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-arrived\">\n                {arrivedCount}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Response teams arrived\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"queue\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"queue\" className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              Emergency Queue\n            </TabsTrigger>\n            <TabsTrigger value=\"activity\" className=\"flex items-center gap-2\">\n              <Activity className=\"w-4 h-4\" />\n              Recent Activity\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Analytics\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"queue\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <EmergencyQueue\n                  onCreateNew={handleCreateEmergency}\n                  onEmergencySelect={handleEmergencySelect}\n                  showActions={true}\n                  userRole=\"admin\"\n                />\n              </div>\n              <div className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\"\n                      onClick={handleCreateEmergency}\n                      data-testid=\"quick-new-emergency\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Emergency\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\"\n                      onClick={() => {\n                        const criticalEmergencies = allEmergencies.filter(e => e.triageLevel === 'red');\n                        if (criticalEmergencies.length > 0) {\n                          handleEmergencySelect(criticalEmergencies[0]);\n                        }\n                      }}\n                      disabled={criticalCount === 0}\n                      data-testid=\"quick-view-critical\"\n                    >\n                      <AlertTriangle className=\"w-4 h-4 mr-2 text-red-500\" />\n                      View Critical Cases\n                    </Button>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full justify-start\"\n                          data-testid=\"quick-clear-all\"\n                        >\n                          <Activity className=\"w-4 h-4 mr-2\" />\n                          Clear All Logs\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent data-testid=\"quick-clear-dialog\">\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Clear All Emergency Logs</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            This action cannot be undone. This will permanently delete all emergency records, \n                            patient data, timeline events, and system logs from the current session.\n                            <br /><br />\n                            <strong>All active emergencies will be lost.</strong>\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel data-testid=\"button-cancel-quick-clear\">\n                            Cancel\n                          </AlertDialogCancel>\n                          <AlertDialogAction \n                            onClick={handleClearAllEmergencies}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                            data-testid=\"button-confirm-quick-clear\"\n                          >\n                            Clear All Logs\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </CardContent>\n                </Card>\n\n                {/* System Status */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">System Status</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Repository</span>\n                      <Badge variant=\"outline\" className=\"text-green-700 border-green-200\">\n                        InMemory Active\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Cross-Tab Sync</span>\n                      <Badge variant=\"outline\" className=\"text-green-700 border-green-200\">\n                        BroadcastChannel\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Hospital Data</span>\n                      <Badge variant=\"outline\" className=\"text-blue-700 border-blue-200\">\n                        3 Hospitals\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"activity\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Recent Activity</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Latest events across all emergencies\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"recent-activity\">\n                  {recentActivity.length === 0 ? (\n                    <p className=\"text-center py-8 text-muted-foreground\">\n                      No activity yet. Create an emergency to get started.\n                    </p>\n                  ) : (\n                    recentActivity.map((event) => (\n                      <div key={event.id} className=\"flex items-start space-x-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {event.emergencyType}\n                            </Badge>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {new Date(event.ts).toLocaleTimeString()}\n                            </span>\n                          </div>\n                          <p className=\"text-sm font-medium\">{event.message}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Emergency {event.emergencyId.slice(-8)}\n                          </p>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Response Times</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Average Response</span>\n                      <span className=\"text-sm font-medium\">~6.5 min</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Critical Cases</span>\n                      <span className=\"text-sm font-medium\">~4.2 min</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Standard Cases</span>\n                      <span className=\"text-sm font-medium\">~8.1 min</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Hospital Utilization</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">City General</span>\n                      <span className=\"text-sm font-medium\">15 beds</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Apollo Specialty</span>\n                      <span className=\"text-sm font-medium\">8 beds</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Fortis Healthcare</span>\n                      <span className=\"text-sm font-medium\">20 beds</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Dialogs and Drawers */}\n        <CreateEmergencyDialog\n          open={showCreateDialog}\n          onClose={() => setShowCreateDialog(false)}\n        />\n        \n        <TimelineDrawer\n          emergency={selectedEmergency}\n          open={showTimeline}\n          onClose={() => {\n            setShowTimeline(false);\n            setSelectedEmergency(null);\n          }}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":18784},"client/src/types.ts":{"content":"export type {\n  Status,\n  HistoryItem,\n  Patient,\n  GeoLocation,\n  AI4HState\n} from \"@shared/schema\";\n\nexport const demoPatient = {\n  id: \"PT-001\",\n  name: \"Rahul Mehta\",\n  age: 24,\n  blood: \"O+\",\n  conditions: [\"Asthma\"],\n  allergies: [\"Penicillin\"],\n  guardian: { name: \"Asha Mehta\", phone: \"+91-90000-00000\" },\n};\n\nexport type TabType = \"user\" | \"ambulance\" | \"hospital\" | \"admin\";\n","size_bytes":385},"replit.md":{"content":"# Overview\n\nThis is an AI4Health Emergency MVP application that simulates a healthcare emergency response system with three distinct user roles: User (patient), Ambulance, and Hospital. The application is built as a single-page React app with tab-based navigation, allowing users to switch between different perspectives within the same browser session. The system demonstrates real-time emergency coordination with cross-tab communication, status tracking, and comprehensive emergency workflow management.\n\n# Recent Changes\n\n**October 14, 2025 - Replit Environment Setup**\n- Successfully imported project from GitHub and configured for Replit environment\n- Installed Node.js 20 and all npm dependencies\n- Configured workflow to run development server on port 5000 with `npm run dev`\n- Server properly configured to bind to 0.0.0.0:5000 with allowedHosts enabled for Replit proxy\n- Deployment configuration set up for autoscale with build and production commands\n- Application running successfully with in-memory storage (no database required for demo)\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **UI Library**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: Zustand for lightweight global state management with persistent storage\n- **Routing**: Single-page application with tab-based navigation (no React Router)\n- **Build System**: Vite with TypeScript compilation and hot module replacement\n\n## Backend Architecture\n- **Server Framework**: Express.js with TypeScript running in ESM mode\n- **API Design**: RESTful APIs for emergency management operations\n- **Data Layer**: In-memory storage implementation with interface for future database integration\n- **Development Integration**: Vite middleware integration for seamless full-stack development\n\n## Cross-Tab Communication\n- **Primary Method**: BroadcastChannel API for real-time state synchronization between browser tabs\n- **Fallback Strategy**: LocalStorage events and direct storage access for browsers without BroadcastChannel support\n- **State Persistence**: Automatic state saving to localStorage with restoration on application load\n\n## Data Storage Solutions\n- **Database Schema**: Drizzle ORM with PostgreSQL schema definitions for users and emergencies\n- **Development Storage**: In-memory storage implementation for rapid development and testing\n- **Production Ready**: Configured for Neon Database (PostgreSQL) with connection pooling\n- **Migration System**: Drizzle Kit for database schema migrations and management\n\n## Real-Time Features\n- **Web Notifications**: Browser notification API integration with permission handling\n- **Visual Feedback**: Toast notifications and status indicators for user interactions\n- **Device Integration**: Vibration API support for mobile devices\n- **Location Services**: Geolocation API integration for emergency location tracking\n\n## Component Architecture\n- **Design System**: Comprehensive UI component library with consistent theming\n- **Modular Views**: Role-specific view components (UserView, AmbulanceView, HospitalView)\n- **Shared Components**: Reusable components for timeline, status chips, and tab navigation\n- **Responsive Design**: Mobile-first approach with Tailwind CSS breakpoints\n\n## Hospital Dashboard Features\n- **Multi-Tab Interface**: Hospital view enhanced with three dedicated tabs for different operational aspects\n  - **Overview Tab**: Original incoming patient management with preparation checklist and resource status\n  - **Emergency Tab**: Advanced emergency management with AI-driven resource planning\n  - **Complete Analysis Tab**: Comprehensive analytics dashboard with charts and AI insights\n\n### Emergency Section\n- **Patient Selection**: Interactive patient cards with severity indicators and condition details\n- **AI Pre-Arrangement System**: Intelligent resource requirement analysis based on patient condition\n  - Automatic blood type and quantity calculation\n  - Medicine requirements with availability checking\n  - Equipment needs assessment with real-time inventory status\n- **Availability Indicators**: Visual ✅/❌ badges for quick resource status identification\n- **Alternate Hospital Suggestions**: Nearby hospital recommendations with distance and resource availability\n- **Action Controls**: Auto-arrange and staff notification buttons for rapid response\n\n### Complete Analysis Section\n- **Key Statistics Dashboard**: Real-time metrics display\n  - Total patients today\n  - Bed occupancy percentage\n  - Resource usage tracking\n  - Staff availability monitoring\n- **Visual Analytics**: Interactive charts powered by Recharts\n  - Pie chart for bed occupancy visualization\n  - Bar chart for resource usage comparison\n- **AI Insights Panel**: Predictive analytics and alerts\n  - ICU occupancy predictions\n  - Blood inventory alerts\n  - Peak hour forecasting\n  - Staff requirement recommendations\n- **Priority-based Alerts**: Color-coded insights (high/medium/low priority)\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, TypeScript for type safety\n- **Build Tools**: Vite for development server and building, esbuild for server compilation\n- **State Management**: Zustand for client-side state, TanStack React Query for server state\n\n## UI and Styling\n- **Component Library**: Radix UI primitives (@radix-ui/react-*) for accessible components\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling\n- **UI Components**: Shadcn/ui component system with class-variance-authority for variants\n- **Icons**: Lucide React for consistent iconography\n- **Data Visualization**: Recharts for interactive charts and analytics dashboards\n\n## Backend Infrastructure  \n- **Server**: Express.js with TypeScript support\n- **Database**: Drizzle ORM with Neon Database (PostgreSQL) driver\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n- **Development Tools**: tsx for TypeScript execution, Replit-specific plugins\n\n## Utility Libraries\n- **Date Handling**: Day.js with timezone support for IST formatting\n- **Validation**: Zod with Drizzle-Zod integration for type-safe schemas\n- **Utilities**: clsx and tailwind-merge for conditional CSS classes\n- **Development**: Various Replit-specific plugins for enhanced development experience\n\n## Development and Deployment\n- **Environment**: Node.js with ESM module support\n- **Database**: PostgreSQL via Neon serverless driver\n- **Hosting**: Configured for Replit deployment with production build optimization\n- **Monitoring**: Custom logging middleware for API requests and development insights","size_bytes":6789},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/views/HospitalView.tsx":{"content":"import { useState } from \"react\";\nimport { useAI4HStore } from \"../store/ai4h-store\";\nimport { Timeline } from \"../components/Timeline\";\nimport { StatusChip } from \"../components/StatusChip\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\n// Dummy data for Emergency Section\nconst DUMMY_PATIENTS = [\n  { id: 1, name: \"John Doe\", age: 45, condition: \"Heart Attack\", blood: \"O+\", severity: \"Critical\", location: \"Downtown\" },\n  { id: 2, name: \"Jane Smith\", age: 32, condition: \"Severe Asthma\", blood: \"A-\", severity: \"High\", location: \"Suburb\" },\n  { id: 3, name: \"Bob Wilson\", age: 58, condition: \"Stroke\", blood: \"B+\", severity: \"Critical\", location: \"City Center\" },\n];\n\nconst CONDITION_REQUIREMENTS: Record<string, { blood: number; medicines: string[]; equipment: string[] }> = {\n  \"Heart Attack\": {\n    blood: 4,\n    medicines: [\"Aspirin\", \"Nitroglycerin\", \"Morphine\", \"Beta-blockers\"],\n    equipment: [\"ECG Monitor\", \"Defibrillator\", \"Oxygen Tank\", \"IV Setup\"]\n  },\n  \"Severe Asthma\": {\n    blood: 0,\n    medicines: [\"Albuterol\", \"Corticosteroids\", \"Epinephrine\", \"Oxygen\"],\n    equipment: [\"Nebulizer\", \"Oxygen Mask\", \"Pulse Oximeter\", \"Ventilator\"]\n  },\n  \"Stroke\": {\n    blood: 2,\n    medicines: [\"tPA\", \"Anticoagulants\", \"Blood Thinners\", \"Aspirin\"],\n    equipment: [\"CT Scanner\", \"IV Setup\", \"Blood Pressure Monitor\", \"Oxygen Tank\"]\n  }\n};\n\nconst HOSPITAL_INVENTORY = {\n  blood: { \"O+\": 8, \"A-\": 3, \"B+\": 5, \"AB+\": 2, \"O-\": 1, \"A+\": 10, \"B-\": 2, \"AB-\": 1 },\n  medicines: [\"Aspirin\", \"Nitroglycerin\", \"Albuterol\", \"Corticosteroids\", \"tPA\", \"Oxygen\"],\n  equipment: [\"ECG Monitor\", \"Defibrillator\", \"Nebulizer\", \"Oxygen Tank\", \"IV Setup\", \"Pulse Oximeter\", \"CT Scanner\"]\n};\n\nconst ALTERNATE_HOSPITALS = [\n  { name: \"City General Hospital\", distance: \"2.5 km\", hasResource: true },\n  { name: \"Memorial Medical Center\", distance: \"4.1 km\", hasResource: true },\n  { name: \"St. Mary's Hospital\", distance: \"5.8 km\", hasResource: false }\n];\n\nexport function HospitalView() {\n  const { status, patient, geo, etaMin, history, startHospitalPrep } = useAI4HStore();\n  const [prepChecklist, setPrepChecklist] = useState({\n    erBed: false,\n    bloodReady: false,\n    ventilator: false,\n    nebulizer: false,\n  });\n  const [prepStarted, setPrepStarted] = useState(false);\n  const [selectedEmergencyPatient, setSelectedEmergencyPatient] = useState(DUMMY_PATIENTS[0]);\n\n  const handlePrepStarted = () => {\n    startHospitalPrep();\n    setPrepStarted(true);\n  };\n\n  const handleChecklistChange = (item: keyof typeof prepChecklist, checked: boolean) => {\n    setPrepChecklist(prev => ({ ...prev, [item]: checked }));\n  };\n\n  // Helper function to check resource availability\n  const checkAvailability = (type: 'blood' | 'medicine' | 'equipment', item: string, quantity?: number) => {\n    if (type === 'blood') {\n      const available = HOSPITAL_INVENTORY.blood[item as keyof typeof HOSPITAL_INVENTORY.blood] || 0;\n      return available >= (quantity || 1);\n    }\n    if (type === 'medicine') {\n      return HOSPITAL_INVENTORY.medicines.includes(item);\n    }\n    if (type === 'equipment') {\n      return HOSPITAL_INVENTORY.equipment.includes(item);\n    }\n    return false;\n  };\n\n  // Analytics data for Complete Analysis section\n  const bedOccupancyData = [\n    { name: 'Occupied', value: 35, color: '#ef4444' },\n    { name: 'Available', value: 15, color: '#10b981' },\n  ];\n\n  const resourceUsageData = [\n    { name: 'Blood Units', usage: 65, available: 35 },\n    { name: 'Ventilators', usage: 80, available: 20 },\n    { name: 'ICU Beds', usage: 70, available: 30 },\n    { name: 'ER Beds', usage: 55, available: 45 },\n  ];\n\n  const aiInsights = [\n    { icon: \"🚨\", message: \"ICU occupancy predicted to reach 90% in 6 hours.\", priority: \"high\" },\n    { icon: \"🩸\", message: \"O- blood low — restock soon.\", priority: \"medium\" },\n    { icon: \"📊\", message: \"Peak admission hours expected 6-9 PM today.\", priority: \"low\" },\n    { icon: \"⚕️\", message: \"Additional staff required for night shift.\", priority: \"medium\" },\n  ];\n\n  if (!patient || !status) {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"hospital-view\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"text-6xl mb-4\">🏥</div>\n            <h2 className=\"text-2xl font-semibold mb-4\">Waiting for Emergency Alerts</h2>\n            <p className=\"text-muted-foreground\">\n              Patient notifications will appear here when emergencies are reported\n            </p>\n          </CardContent>\n        </Card>\n      </main>\n    );\n  }\n\n  // Mock data for today's alerts\n  const todayAlerts = [\n    { id: \"1\", name: patient.name, status, time: \"2:34 PM\", condition: patient.conditions[0], blood: patient.blood }\n  ];\n\n  // Get requirements for selected emergency patient\n  const requirements = CONDITION_REQUIREMENTS[selectedEmergencyPatient.condition] || { blood: 0, medicines: [], equipment: [] };\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"hospital-view\">\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 mb-6\">\n          <TabsTrigger value=\"overview\">📋 Overview</TabsTrigger>\n          <TabsTrigger value=\"emergency\">🚨 Emergency</TabsTrigger>\n          <TabsTrigger value=\"analysis\">📊 Complete Analysis</TabsTrigger>\n        </TabsList>\n\n        {/* OVERVIEW TAB - Existing Content */}\n        <TabsContent value=\"overview\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Incoming Patient Card */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-blue-50 border-2 border-blue-200 rounded-xl p-6 mb-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-xl font-bold text-blue-800\">📋 INCOMING PATIENT</h2>\n              <StatusChip status={status} />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Patient Details</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Name:</span>\n                    <span className=\"font-medium\" data-testid=\"patient-name\">{patient.name}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Age:</span>\n                    <span className=\"font-medium\" data-testid=\"patient-age\">{patient.age} years</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Blood Type:</span>\n                    <span className=\"font-medium text-red-600\" data-testid=\"patient-blood\">{patient.blood}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Medical History:</span>\n                    <span className=\"font-medium\" data-testid=\"patient-conditions\">\n                      {patient.conditions.join(\", \")}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Allergies:</span>\n                    <span className=\"font-medium text-red-600\" data-testid=\"patient-allergies\">\n                      {patient.allergies.join(\", \")}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Arrival Information</h3>\n                <div className=\"space-y-2\">\n                  <div>\n                    <span className=\"text-gray-600\">Current Status:</span>\n                    <p className=\"font-medium\" data-testid=\"ambulance-status\">\n                      {status === \"NEW\" ? \"Emergency Reported\" :\n                       status === \"ACK\" ? \"Ambulance Acknowledged\" :\n                       status === \"ENROUTE\" ? \"Ambulance En Route\" :\n                       \"Ambulance Arrived\"}\n                    </p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Estimated Arrival:</span>\n                    <p className=\"font-bold text-lg text-blue-600\" data-testid=\"eta-minutes\">\n                      {etaMin ? `${etaMin} minutes` : \"Calculating...\"}\n                    </p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Emergency Contact:</span>\n                    <p className=\"font-medium\" data-testid=\"guardian-name\">{patient.guardian.name}</p>\n                    <p className=\"text-blue-600\" data-testid=\"guardian-phone\">{patient.guardian.phone}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Preparation Checklist */}\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Emergency Preparation Checklist</h3>\n                <Button\n                  onClick={handlePrepStarted}\n                  disabled={prepStarted}\n                  className=\"bg-green-600 hover:bg-green-700 text-white font-semibold\"\n                  data-testid=\"button-prep-started\"\n                >\n                  <i className=\"fas fa-check mr-2\"></i>\n                  {prepStarted ? \"Prep Complete\" : \"Prep Started\"}\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Checkbox\n                      id=\"er-bed\"\n                      checked={prepChecklist.erBed}\n                      onCheckedChange={(checked) => handleChecklistChange('erBed', checked as boolean)}\n                      data-testid=\"checkbox-er-bed\"\n                    />\n                    <label htmlFor=\"er-bed\" className=\"text-foreground cursor-pointer\">\n                      ER Bed Available\n                    </label>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Checkbox\n                      id=\"blood-ready\"\n                      checked={prepChecklist.bloodReady}\n                      onCheckedChange={(checked) => handleChecklistChange('bloodReady', checked as boolean)}\n                      data-testid=\"checkbox-blood-ready\"\n                    />\n                    <label htmlFor=\"blood-ready\" className=\"text-foreground cursor-pointer\">\n                      {patient.blood} Blood Ready\n                    </label>\n                  </div>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Checkbox\n                      id=\"ventilator\"\n                      checked={prepChecklist.ventilator}\n                      onCheckedChange={(checked) => handleChecklistChange('ventilator', checked as boolean)}\n                      data-testid=\"checkbox-ventilator\"\n                    />\n                    <label htmlFor=\"ventilator\" className=\"text-foreground cursor-pointer\">\n                      Ventilator Ready\n                    </label>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Checkbox\n                      id=\"nebulizer\"\n                      checked={prepChecklist.nebulizer}\n                      onCheckedChange={(checked) => handleChecklistChange('nebulizer', checked as boolean)}\n                      data-testid=\"checkbox-nebulizer\"\n                    />\n                    <label htmlFor=\"nebulizer\" className=\"text-foreground cursor-pointer\">\n                      Asthma Nebulizer\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Today's Alerts Panel */}\n        <div className=\"space-y-6\">\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold text-foreground mb-4\">Today's Emergency Alerts</h3>\n              <div className=\"space-y-3\" data-testid=\"today-alerts\">\n                {todayAlerts.map((alert) => (\n                  <div key={alert.id} className=\"border border-border rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"font-medium text-sm\" data-testid={`alert-name-${alert.id}`}>\n                        {alert.name}\n                      </span>\n                      <StatusChip status={alert.status} />\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\" data-testid={`alert-details-${alert.id}`}>\n                      {alert.time} - {alert.condition}, {alert.blood}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Hospital Resources */}\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold text-foreground mb-4\">Resource Status</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">ER Beds</span>\n                  <span className=\"text-green-600 font-medium\" data-testid=\"resource-er-beds\">3 Available</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">ICU Beds</span>\n                  <span className=\"text-amber-600 font-medium\" data-testid=\"resource-icu-beds\">1 Available</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">{patient.blood} Blood</span>\n                  <span className=\"text-green-600 font-medium\" data-testid=\"resource-blood\">12 Units</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Staff on Duty</span>\n                  <span className=\"text-green-600 font-medium\" data-testid=\"resource-staff\">8 Doctors</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      \n      {/* Timeline */}\n      <div className=\"mt-8\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-lg font-semibold text-foreground mb-4\">Patient Timeline</h2>\n            <Timeline history={history} />\n          </CardContent>\n        </Card>\n      </div>\n        </TabsContent>\n\n        {/* EMERGENCY TAB */}\n        <TabsContent value=\"emergency\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Patient Selection */}\n            <div className=\"lg:col-span-3\">\n              <Card className=\"shadow-lg border-orange-200 border-2\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Select Emergency Patient</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {DUMMY_PATIENTS.map((p) => (\n                      <button\n                        key={p.id}\n                        onClick={() => setSelectedEmergencyPatient(p)}\n                        className={`p-4 rounded-lg border-2 text-left transition-all ${\n                          selectedEmergencyPatient.id === p.id\n                            ? 'border-orange-500 bg-orange-50'\n                            : 'border-gray-200 hover:border-orange-300'\n                        }`}\n                      >\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <span className=\"font-semibold\">{p.name}</span>\n                          <Badge className={p.severity === \"Critical\" ? \"bg-red-500\" : \"bg-orange-500\"}>\n                            {p.severity}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{p.age} yrs • {p.condition}</p>\n                        <p className=\"text-sm text-red-600 font-medium\">{p.blood}</p>\n                      </button>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Selected Patient Details */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"shadow-lg bg-red-50 border-2 border-red-200\">\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-xl font-bold text-red-800 mb-4\">🚨 EMERGENCY PATIENT</h2>\n                  <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                    <div>\n                      <span className=\"text-gray-600\">Name:</span>\n                      <p className=\"font-semibold text-lg\">{selectedEmergencyPatient.name}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Age:</span>\n                      <p className=\"font-semibold text-lg\">{selectedEmergencyPatient.age} years</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Condition:</span>\n                      <p className=\"font-semibold text-lg text-red-700\">{selectedEmergencyPatient.condition}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Blood Type:</span>\n                      <p className=\"font-semibold text-lg text-red-600\">{selectedEmergencyPatient.blood}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Severity:</span>\n                      <Badge className={selectedEmergencyPatient.severity === \"Critical\" ? \"bg-red-600\" : \"bg-orange-500\"}>\n                        {selectedEmergencyPatient.severity}\n                      </Badge>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Location:</span>\n                      <p className=\"font-semibold\">{selectedEmergencyPatient.location}</p>\n                    </div>\n                  </div>\n\n                  {/* AI Pre-Arrangement List */}\n                  <div className=\"bg-white rounded-lg p-4 border border-red-200\">\n                    <h3 className=\"font-semibold text-lg mb-4\">🤖 AI-Generated Pre-Arrangement List</h3>\n                    \n                    {/* Blood Requirements */}\n                    {requirements.blood > 0 && (\n                      <div className=\"mb-4\">\n                        <h4 className=\"font-medium text-gray-700 mb-2\">Blood Requirements</h4>\n                        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                          <span>{selectedEmergencyPatient.blood} - {requirements.blood} units</span>\n                          {checkAvailability('blood', selectedEmergencyPatient.blood, requirements.blood) ? (\n                            <Badge className=\"bg-green-500\">✅ Available</Badge>\n                          ) : (\n                            <Badge className=\"bg-red-500\">❌ Unavailable</Badge>\n                          )}\n                        </div>\n                        {!checkAvailability('blood', selectedEmergencyPatient.blood, requirements.blood) && (\n                          <div className=\"mt-2 flex gap-2\">\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-orange-600 border-orange-600\">\n                              Suggest Alternate Hospital\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-blue-600 border-blue-600\">\n                              Request Support\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    )}\n\n                    {/* Medicines */}\n                    <div className=\"mb-4\">\n                      <h4 className=\"font-medium text-gray-700 mb-2\">Required Medicines</h4>\n                      <div className=\"space-y-2\">\n                        {requirements.medicines.map((med, idx) => (\n                          <div key={idx} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                            <span>{med}</span>\n                            {checkAvailability('medicine', med) ? (\n                              <Badge className=\"bg-green-500\">✅ Available</Badge>\n                            ) : (\n                              <Badge className=\"bg-red-500\">❌ Unavailable</Badge>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Equipment */}\n                    <div className=\"mb-4\">\n                      <h4 className=\"font-medium text-gray-700 mb-2\">Required Equipment</h4>\n                      <div className=\"space-y-2\">\n                        {requirements.equipment.map((eq, idx) => (\n                          <div key={idx} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                            <span>{eq}</span>\n                            {checkAvailability('equipment', eq) ? (\n                              <Badge className=\"bg-green-500\">✅ Available</Badge>\n                            ) : (\n                              <Badge className=\"bg-red-500\">❌ Unavailable</Badge>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex gap-3 mt-6\">\n                      <Button className=\"flex-1 bg-green-600 hover:bg-green-700\">\n                        ⚡ Auto-Arrange\n                      </Button>\n                      <Button className=\"flex-1 bg-blue-600 hover:bg-blue-700\">\n                        📢 Notify Staff\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Alternate Hospitals */}\n            <div>\n              <Card className=\"shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold mb-4\">Nearby Hospitals</h3>\n                  <div className=\"space-y-3\">\n                    {ALTERNATE_HOSPITALS.map((hosp, idx) => (\n                      <div key={idx} className=\"p-3 border rounded-lg\">\n                        <p className=\"font-medium\">{hosp.name}</p>\n                        <p className=\"text-sm text-gray-600\">{hosp.distance}</p>\n                        <Badge className={hosp.hasResource ? \"bg-green-500 mt-2\" : \"bg-gray-400 mt-2\"}>\n                          {hosp.hasResource ? \"Has Resources\" : \"Limited\"}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* COMPLETE ANALYSIS TAB */}\n        <TabsContent value=\"analysis\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Key Statistics */}\n            <Card className=\"shadow-lg\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">📈 Key Statistics</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm text-gray-600\">Total Patients Today</p>\n                    <p className=\"text-3xl font-bold text-blue-600\">42</p>\n                  </div>\n                  <div className=\"p-4 bg-orange-50 rounded-lg\">\n                    <p className=\"text-sm text-gray-600\">Bed Occupancy</p>\n                    <p className=\"text-3xl font-bold text-orange-600\">70%</p>\n                  </div>\n                  <div className=\"p-4 bg-purple-50 rounded-lg\">\n                    <p className=\"text-sm text-gray-600\">Resource Usage</p>\n                    <p className=\"text-3xl font-bold text-purple-600\">68%</p>\n                  </div>\n                  <div className=\"p-4 bg-green-50 rounded-lg\">\n                    <p className=\"text-sm text-gray-600\">Staff on Duty</p>\n                    <p className=\"text-3xl font-bold text-green-600\">24</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Bed Occupancy Chart */}\n            <Card className=\"shadow-lg\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Bed Occupancy</h3>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <PieChart>\n                    <Pie\n                      data={bedOccupancyData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={80}\n                      paddingAngle={5}\n                      dataKey=\"value\"\n                      label\n                    >\n                      {bedOccupancyData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Resource Usage Chart */}\n            <Card className=\"shadow-lg lg:col-span-2\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Resource Usage Analysis</h3>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={resourceUsageData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"usage\" fill=\"#ef4444\" name=\"In Use %\" />\n                    <Bar dataKey=\"available\" fill=\"#10b981\" name=\"Available %\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* AI Insights */}\n            <Card className=\"shadow-lg lg:col-span-2\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">🤖 AI Insights & Predictions</h3>\n                <div className=\"space-y-3\">\n                  {aiInsights.map((insight, idx) => (\n                    <div\n                      key={idx}\n                      className={`p-4 rounded-lg border-l-4 ${\n                        insight.priority === 'high'\n                          ? 'bg-red-50 border-red-500'\n                          : insight.priority === 'medium'\n                          ? 'bg-orange-50 border-orange-500'\n                          : 'bg-blue-50 border-blue-500'\n                      }`}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <span className=\"text-2xl\">{insight.icon}</span>\n                        <div className=\"flex-1\">\n                          <p className=\"text-gray-800\">{insight.message}</p>\n                          <Badge\n                            className={`mt-2 ${\n                              insight.priority === 'high'\n                                ? 'bg-red-500'\n                                : insight.priority === 'medium'\n                                ? 'bg-orange-500'\n                                : 'bg-blue-500'\n                            }`}\n                          >\n                            {insight.priority.toUpperCase()}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </main>\n  );\n}\n","size_bytes":29185},"server/repo/index.ts":{"content":"import type { Profile, Hospital, Emergency, NewEmergency, IncidentEvent, AmbulancePosition, EmergencyFilter } from './types';\n\nexport interface Repo {\n  // auth / profiles\n  getProfile(userId: string): Promise<Profile | null>;\n  upsertProfile(profile: Profile): Promise<void>;\n\n  // hospitals\n  listHospitals(): Promise<Hospital[]>;\n  getHospital(id: string): Promise<Hospital | null>;\n  upsertHospital(hospital: Hospital): Promise<void>;\n\n  // emergencies\n  createEmergency(emergency: NewEmergency): Promise<Emergency>;\n  listEmergencies(filter?: EmergencyFilter): Promise<Emergency[]>;\n  getEmergency(id: string): Promise<Emergency | null>;\n  updateEmergency(id: string, patch: Partial<Emergency>): Promise<void>;\n\n  // incident events (timeline)\n  addIncidentEvent(event: IncidentEvent): Promise<void>;\n  listIncidentEvents(emergencyId: string): Promise<IncidentEvent[]>;\n\n  // ambulance positions\n  addAmbulancePosition(position: AmbulancePosition): Promise<void>;\n  listAmbulancePositions(ambulanceId: string, limit?: number): Promise<AmbulancePosition[]>;\n\n  // archival\n  archiveCompleted(olderThanDays: number): Promise<number>;\n}\n\nexport * from './types';","size_bytes":1164},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/repo/supabase.ts":{"content":"import type { Repo, Profile, Hospital, Emergency, NewEmergency, IncidentEvent, AmbulancePosition, EmergencyFilter } from './index';\n\n// Stub implementation for Supabase - will be fully implemented when USE_SUPABASE=1\nexport class SupabaseRepo implements Repo {\n  constructor() {\n    console.log('⚠️  SupabaseRepo is a stub implementation. Please implement when USE_SUPABASE=1');\n  }\n\n  async getProfile(userId: string): Promise<Profile | null> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async upsertProfile(profile: Profile): Promise<void> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async listHospitals(): Promise<Hospital[]> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async getHospital(id: string): Promise<Hospital | null> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async upsertHospital(hospital: Hospital): Promise<void> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async createEmergency(emergency: NewEmergency): Promise<Emergency> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async listEmergencies(filter?: EmergencyFilter): Promise<Emergency[]> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async getEmergency(id: string): Promise<Emergency | null> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async updateEmergency(id: string, patch: Partial<Emergency>): Promise<void> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async addIncidentEvent(event: IncidentEvent): Promise<void> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async listIncidentEvents(emergencyId: string): Promise<IncidentEvent[]> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async addAmbulancePosition(position: AmbulancePosition): Promise<void> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async listAmbulancePositions(ambulanceId: string, limit?: number): Promise<AmbulancePosition[]> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n\n  async archiveCompleted(olderThanDays: number): Promise<number> {\n    throw new Error('SupabaseRepo not implemented yet. Set USE_SUPABASE=0 to use InMemoryRepo');\n  }\n}","size_bytes":2771},"client/src/utils/time.ts":{"content":"import dayjs from \"dayjs\";\nimport timezone from \"dayjs/plugin/timezone\";\nimport utc from \"dayjs/plugin/utc\";\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\nexport function formatIST(ts: string | Date): string {\n  return dayjs(ts).tz(\"Asia/Kolkata\").format(\"h:mm A\");\n}\n\nexport function formatISTFull(ts: string | Date): string {\n  return dayjs(ts).tz(\"Asia/Kolkata\").format(\"MMM D, h:mm A\");\n}\n\nexport function nowISO(): string {\n  return dayjs().toISOString();\n}\n","size_bytes":462},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/views/HospitalCapacityConsole.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Building2, \n  Users, \n  Bed, \n  Stethoscope, \n  Upload, \n  Download, \n  Save, \n  RefreshCw,\n  MapPin,\n  CheckCircle,\n  XCircle,\n  Plus,\n  Trash2\n} from \"lucide-react\";\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer } from \"recharts\";\n\ninterface Hospital {\n  id: string;\n  name: string;\n  lat: number;\n  lon: number;\n  bedsAvailable: number;\n  doctorsAvailable: number;\n  capabilities: string[];\n  acceptingEmergencies: boolean;\n}\n\ninterface HospitalCapacityUpdate {\n  bedsAvailable: number;\n  doctorsAvailable: number;\n  capabilities: string[];\n  acceptingEmergencies: boolean;\n}\n\nconst HOSPITAL_CAPABILITIES = [\n  'Emergency Care',\n  'Trauma Center',\n  'Cardiac Care',\n  'Stroke Center',\n  'Pediatric Emergency',\n  'Burn Center',\n  'Poison Control',\n  'ICU',\n  'Surgery',\n  'Neurology',\n  'Orthopedics',\n  'Radiology',\n  'Blood Bank',\n  'Pharmacy',\n  'Laboratory'\n];\n\n// Dummy data for Emergency Section\nconst DUMMY_EMERGENCY_PATIENTS = [\n  { id: 1, name: \"John Doe\", age: 45, condition: \"Heart Attack\", blood: \"O+\", severity: \"Critical\", location: \"Downtown\" },\n  { id: 2, name: \"Jane Smith\", age: 32, condition: \"Severe Asthma\", blood: \"A-\", severity: \"High\", location: \"Suburb\" },\n  { id: 3, name: \"Bob Wilson\", age: 58, condition: \"Stroke\", blood: \"B+\", severity: \"Critical\", location: \"City Center\" },\n];\n\nconst CONDITION_REQUIREMENTS: Record<string, { blood: number; medicines: string[]; equipment: string[] }> = {\n  \"Heart Attack\": {\n    blood: 4,\n    medicines: [\"Aspirin\", \"Nitroglycerin\", \"Morphine\", \"Beta-blockers\"],\n    equipment: [\"ECG Monitor\", \"Defibrillator\", \"Oxygen Tank\", \"IV Setup\"]\n  },\n  \"Severe Asthma\": {\n    blood: 0,\n    medicines: [\"Albuterol\", \"Corticosteroids\", \"Epinephrine\", \"Oxygen\"],\n    equipment: [\"Nebulizer\", \"Oxygen Mask\", \"Pulse Oximeter\", \"Ventilator\"]\n  },\n  \"Stroke\": {\n    blood: 2,\n    medicines: [\"tPA\", \"Anticoagulants\", \"Blood Thinners\", \"Aspirin\"],\n    equipment: [\"CT Scanner\", \"IV Setup\", \"Blood Pressure Monitor\", \"Oxygen Tank\"]\n  }\n};\n\nconst HOSPITAL_INVENTORY = {\n  blood: { \"O+\": 8, \"A-\": 3, \"B+\": 5, \"AB+\": 2, \"O-\": 1, \"A+\": 10, \"B-\": 2, \"AB-\": 1 },\n  medicines: [\"Aspirin\", \"Nitroglycerin\", \"Albuterol\", \"Corticosteroids\", \"tPA\", \"Oxygen\"],\n  equipment: [\"ECG Monitor\", \"Defibrillator\", \"Nebulizer\", \"Oxygen Tank\", \"IV Setup\", \"Pulse Oximeter\", \"CT Scanner\"]\n};\n\nconst ALTERNATE_HOSPITALS = [\n  { name: \"City General Hospital\", distance: \"2.5 km\", hasResource: true },\n  { name: \"Memorial Medical Center\", distance: \"4.1 km\", hasResource: true },\n  { name: \"St. Mary's Hospital\", distance: \"5.8 km\", hasResource: false }\n];\n\nexport function HospitalCapacityConsole() {\n  const [currentHospital, setCurrentHospital] = useState<Hospital | null>(null);\n  const [hospitals, setHospitals] = useState<Hospital[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [showCSVDialog, setShowCSVDialog] = useState(false);\n  const [csvData, setCsvData] = useState(\"\");\n  const [selectedHospitalId, setSelectedHospitalId] = useState<string>(\"\");\n  const [selectedEmergencyPatient, setSelectedEmergencyPatient] = useState(DUMMY_EMERGENCY_PATIENTS[0]);\n  \n  // Form state for capacity updates\n  const [capacityForm, setCapacityForm] = useState<HospitalCapacityUpdate>({\n    bedsAvailable: 0,\n    doctorsAvailable: 0,\n    capabilities: [],\n    acceptingEmergencies: true\n  });\n\n  const { toast } = useToast();\n\n  // Helper function to check resource availability\n  const checkAvailability = (type: 'blood' | 'medicine' | 'equipment', item: string, quantity?: number) => {\n    if (type === 'blood') {\n      const available = HOSPITAL_INVENTORY.blood[item as keyof typeof HOSPITAL_INVENTORY.blood] || 0;\n      return available >= (quantity || 1);\n    }\n    if (type === 'medicine') {\n      return HOSPITAL_INVENTORY.medicines.includes(item);\n    }\n    if (type === 'equipment') {\n      return HOSPITAL_INVENTORY.equipment.includes(item);\n    }\n    return false;\n  };\n\n  // Analytics data for Complete Analysis section\n  const bedOccupancyData = [\n    { name: 'Occupied', value: 35, color: '#ef4444' },\n    { name: 'Available', value: 15, color: '#10b981' },\n  ];\n\n  const resourceUsageData = [\n    { name: 'Blood Units', usage: 65, available: 35 },\n    { name: 'Ventilators', usage: 80, available: 20 },\n    { name: 'ICU Beds', usage: 70, available: 30 },\n    { name: 'ER Beds', usage: 55, available: 45 },\n  ];\n\n  const aiInsights = [\n    { icon: \"🚨\", message: \"ICU occupancy predicted to reach 90% in 6 hours.\", priority: \"high\" },\n    { icon: \"🩸\", message: \"O- blood low — restock soon.\", priority: \"medium\" },\n    { icon: \"📊\", message: \"Peak admission hours expected 6-9 PM today.\", priority: \"low\" },\n    { icon: \"⚕️\", message: \"Additional staff required for night shift.\", priority: \"medium\" },\n  ];\n\n  // Get requirements for selected emergency patient\n  const requirements = CONDITION_REQUIREMENTS[selectedEmergencyPatient.condition] || { blood: 0, medicines: [], equipment: [] };\n\n  // Load hospitals and select current one\n  useEffect(() => {\n    loadHospitals();\n  }, []);\n\n  const loadHospitals = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/hospitals');\n      if (response.ok) {\n        const hospitalsData = await response.json();\n        setHospitals(hospitalsData);\n        \n        // Auto-select first hospital if none selected\n        if (hospitalsData.length > 0 && !selectedHospitalId) {\n          selectHospital(hospitalsData[0].id);\n        }\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load hospitals\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectHospital = (hospitalId: string) => {\n    const hospital = hospitals.find(h => h.id === hospitalId);\n    if (hospital) {\n      setCurrentHospital(hospital);\n      setSelectedHospitalId(hospitalId);\n      setCapacityForm({\n        bedsAvailable: hospital.bedsAvailable || 0,\n        doctorsAvailable: hospital.doctorsAvailable || 0,\n        capabilities: hospital.capabilities || [],\n        acceptingEmergencies: hospital.acceptingEmergencies\n      });\n    }\n  };\n\n  const updateCapacity = async () => {\n    if (!currentHospital) return;\n    \n    setSaving(true);\n    try {\n      const response = await fetch(`/api/hospitals/${currentHospital.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(capacityForm)\n      });\n\n      if (response.ok) {\n        const updatedHospital = await response.json();\n        setCurrentHospital(updatedHospital);\n        \n        // Update in hospitals list\n        setHospitals(prev => prev.map(h => \n          h.id === currentHospital.id ? updatedHospital : h\n        ));\n\n        toast({\n          title: \"Success\",\n          description: \"Hospital capacity updated successfully\"\n        });\n      } else {\n        throw new Error(\"Failed to update capacity\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\", \n        description: \"Failed to update hospital capacity\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleCapabilityToggle = (capability: string) => {\n    setCapacityForm(prev => ({\n      ...prev,\n      capabilities: prev.capabilities.includes(capability)\n        ? prev.capabilities.filter(c => c !== capability)\n        : [...prev.capabilities, capability]\n    }));\n  };\n\n  const exportCSV = () => {\n    const csvContent = [\n      // CSV Header\n      'name,lat,lon,beds_available,doctors_available,capabilities,accepting_emergencies',\n      // Hospital data rows\n      ...hospitals.map(h => \n        `\"${h.name}\",${h.lat},${h.lon},${h.bedsAvailable},${h.doctorsAvailable},\"${h.capabilities.join(';')}\",${h.acceptingEmergencies}`\n      )\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `hospitals_capacity_${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Success\",\n      description: \"Hospital data exported to CSV\"\n    });\n  };\n\n  const importCSV = async () => {\n    if (!csvData.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please paste CSV data first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/hospitals/import-csv', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ csvData })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Success\", \n          description: `Imported ${result.imported} hospitals successfully`\n        });\n        setShowCSVDialog(false);\n        setCsvData(\"\");\n        loadHospitals();\n      } else {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n    } catch (error) {\n      toast({\n        title: \"Import Error\",\n        description: `Failed to import CSV: ${error}`,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"hospital-console\">\n        <div className=\"flex items-center justify-center h-64\">\n          <RefreshCw className=\"w-8 h-8 animate-spin\" />\n          <span className=\"ml-2\">Loading hospitals...</span>\n        </div>\n      </main>\n    );\n  }\n\n  if (hospitals.length === 0) {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"hospital-console\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-12 text-center\">\n            <Building2 className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n            <h2 className=\"text-2xl font-semibold mb-4\">No Hospitals Found</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              No hospitals are registered in the system. Import hospital data to get started.\n            </p>\n            <Dialog open={showCSVDialog} onOpenChange={setShowCSVDialog}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-import-csv\">\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Import Hospital Data\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Import Hospital CSV Data</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>CSV Format: name,lat,lon,beds_available,doctors_available,capabilities,accepting_emergencies</Label>\n                    <Textarea\n                      placeholder=\"Hospital Name,40.7128,-74.0060,50,25,Emergency Care;ICU;Surgery,true\"\n                      value={csvData}\n                      onChange={(e) => setCsvData(e.target.value)}\n                      className=\"mt-2 min-h-32\"\n                      data-testid=\"textarea-csv-data\"\n                    />\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button variant=\"outline\" onClick={() => setShowCSVDialog(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={importCSV} data-testid=\"button-confirm-import\">\n                      Import Data\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </CardContent>\n        </Card>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\" data-testid=\"hospital-console\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Hospital Capacity Console</h1>\n          <p className=\"text-muted-foreground\">Manage hospital resources and availability</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Hospital Selector */}\n          <Select value={selectedHospitalId} onValueChange={selectHospital} data-testid=\"select-hospital\">\n            <SelectTrigger className=\"w-64\">\n              <SelectValue placeholder=\"Select Hospital\" />\n            </SelectTrigger>\n            <SelectContent>\n              {hospitals.map(hospital => (\n                <SelectItem key={hospital.id} value={hospital.id}>\n                  {hospital.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Button variant=\"outline\" onClick={exportCSV} data-testid=\"button-export-csv\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export CSV\n          </Button>\n          \n          <Dialog open={showCSVDialog} onOpenChange={setShowCSVDialog}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" data-testid=\"button-import-csv\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Import CSV\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Import Hospital CSV Data</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>CSV Format: name,lat,lon,beds_available,doctors_available,capabilities,accepting_emergencies</Label>\n                  <Textarea\n                    placeholder=\"Hospital Name,40.7128,-74.0060,50,25,Emergency Care;ICU;Surgery,true\"\n                    value={csvData}\n                    onChange={(e) => setCsvData(e.target.value)}\n                    className=\"mt-2 min-h-32\"\n                    data-testid=\"textarea-csv-data\"\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setShowCSVDialog(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={importCSV} data-testid=\"button-confirm-import\">\n                    Import Data\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n          \n          <Button onClick={loadHospitals} variant=\"outline\" size=\"sm\" data-testid=\"button-refresh\">\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {currentHospital && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Capacity Management */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"capacity\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"capacity\" data-testid=\"tab-capacity\">\n                  📋 Capacity\n                </TabsTrigger>\n                <TabsTrigger value=\"capabilities\" data-testid=\"tab-capabilities\">\n                  ⚕️ Capabilities\n                </TabsTrigger>\n                <TabsTrigger value=\"emergency\" data-testid=\"tab-emergency\">\n                  🚨 Emergency\n                </TabsTrigger>\n                <TabsTrigger value=\"analysis\" data-testid=\"tab-analysis\">\n                  📊 Analysis\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Capacity Tab */}\n              <TabsContent value=\"capacity\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Bed className=\"w-5 h-5 mr-2\" />\n                      Bed & Staff Capacity\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <Label htmlFor=\"beds-available\">Beds Available</Label>\n                        <Input\n                          id=\"beds-available\"\n                          type=\"number\"\n                          min=\"0\"\n                          value={capacityForm.bedsAvailable}\n                          onChange={(e) => setCapacityForm(prev => ({ \n                            ...prev, \n                            bedsAvailable: parseInt(e.target.value) || 0 \n                          }))}\n                          className=\"mt-1\"\n                          data-testid=\"input-beds-available\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"doctors-available\">Doctors Available</Label>\n                        <Input\n                          id=\"doctors-available\"\n                          type=\"number\"\n                          min=\"0\"\n                          value={capacityForm.doctorsAvailable}\n                          onChange={(e) => setCapacityForm(prev => ({ \n                            ...prev, \n                            doctorsAvailable: parseInt(e.target.value) || 0 \n                          }))}\n                          className=\"mt-1\"\n                          data-testid=\"input-doctors-available\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"accepting-emergencies\"\n                        checked={capacityForm.acceptingEmergencies}\n                        onCheckedChange={(checked) => setCapacityForm(prev => ({ \n                          ...prev, \n                          acceptingEmergencies: checked \n                        }))}\n                        data-testid=\"switch-accepting-emergencies\"\n                      />\n                      <Label htmlFor=\"accepting-emergencies\" className=\"font-medium\">\n                        Currently Accepting Emergency Patients\n                      </Label>\n                    </div>\n\n                    <Button \n                      onClick={updateCapacity} \n                      disabled={saving}\n                      className=\"w-full\"\n                      data-testid=\"button-update-capacity\"\n                    >\n                      {saving ? (\n                        <>\n                          <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Updating...\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Update Capacity\n                        </>\n                      )}\n                    </Button>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Capabilities Tab */}\n              <TabsContent value=\"capabilities\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Stethoscope className=\"w-5 h-5 mr-2\" />\n                      Medical Capabilities\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {HOSPITAL_CAPABILITIES.map(capability => (\n                        <div key={capability} className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id={`capability-${capability}`}\n                            checked={capacityForm.capabilities.includes(capability)}\n                            onChange={() => handleCapabilityToggle(capability)}\n                            className=\"rounded\"\n                            data-testid={`checkbox-${capability.toLowerCase().replace(/\\s+/g, '-')}`}\n                          />\n                          <Label htmlFor={`capability-${capability}`} className=\"text-sm\">\n                            {capability}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n\n                    <Button \n                      onClick={updateCapacity} \n                      disabled={saving}\n                      className=\"w-full mt-6\"\n                      data-testid=\"button-update-capabilities\"\n                    >\n                      {saving ? (\n                        <>\n                          <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Updating...\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Update Capabilities\n                        </>\n                      )}\n                    </Button>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* EMERGENCY TAB */}\n              <TabsContent value=\"emergency\" className=\"space-y-6\">\n                {/* Patient Selection */}\n                <Card className=\"border-orange-200 border-2\">\n                  <CardHeader>\n                    <CardTitle>Select Emergency Patient</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {DUMMY_EMERGENCY_PATIENTS.map((p) => (\n                        <button\n                          key={p.id}\n                          onClick={() => setSelectedEmergencyPatient(p)}\n                          className={`p-4 rounded-lg border-2 text-left transition-all ${\n                            selectedEmergencyPatient.id === p.id\n                              ? 'border-orange-500 bg-orange-50'\n                              : 'border-gray-200 hover:border-orange-300'\n                          }`}\n                        >\n                          <div className=\"flex justify-between items-start mb-2\">\n                            <span className=\"font-semibold\">{p.name}</span>\n                            <Badge className={p.severity === \"Critical\" ? \"bg-red-500\" : \"bg-orange-500\"}>\n                              {p.severity}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600\">{p.age} yrs • {p.condition}</p>\n                          <p className=\"text-sm text-red-600 font-medium\">{p.blood}</p>\n                        </button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Selected Patient & Pre-Arrangement */}\n                <Card className=\"bg-red-50 border-2 border-red-200\">\n                  <CardHeader>\n                    <CardTitle className=\"text-red-800\">🚨 EMERGENCY PATIENT</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                      <div>\n                        <span className=\"text-gray-600\">Name:</span>\n                        <p className=\"font-semibold text-lg\">{selectedEmergencyPatient.name}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Age:</span>\n                        <p className=\"font-semibold text-lg\">{selectedEmergencyPatient.age} years</p>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Condition:</span>\n                        <p className=\"font-semibold text-lg text-red-700\">{selectedEmergencyPatient.condition}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Blood Type:</span>\n                        <p className=\"font-semibold text-lg text-red-600\">{selectedEmergencyPatient.blood}</p>\n                      </div>\n                    </div>\n\n                    {/* AI Pre-Arrangement List */}\n                    <div className=\"bg-white rounded-lg p-4 border border-red-200\">\n                      <h3 className=\"font-semibold text-lg mb-4\">🤖 AI-Generated Pre-Arrangement List</h3>\n                      \n                      {/* Blood Requirements */}\n                      {requirements.blood > 0 && (\n                        <div className=\"mb-4\">\n                          <h4 className=\"font-medium text-gray-700 mb-2\">Blood Requirements</h4>\n                          <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                            <span>{selectedEmergencyPatient.blood} - {requirements.blood} units</span>\n                            {checkAvailability('blood', selectedEmergencyPatient.blood, requirements.blood) ? (\n                              <Badge className=\"bg-green-500\">✅ Available</Badge>\n                            ) : (\n                              <Badge className=\"bg-red-500\">❌ Unavailable</Badge>\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Medicines */}\n                      <div className=\"mb-4\">\n                        <h4 className=\"font-medium text-gray-700 mb-2\">Required Medicines</h4>\n                        <div className=\"space-y-2\">\n                          {requirements.medicines.map((med, idx) => (\n                            <div key={idx} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                              <span>{med}</span>\n                              {checkAvailability('medicine', med) ? (\n                                <Badge className=\"bg-green-500\">✅ Available</Badge>\n                              ) : (\n                                <Badge className=\"bg-red-500\">❌ Unavailable</Badge>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Equipment */}\n                      <div className=\"mb-4\">\n                        <h4 className=\"font-medium text-gray-700 mb-2\">Required Equipment</h4>\n                        <div className=\"space-y-2\">\n                          {requirements.equipment.map((eq, idx) => (\n                            <div key={idx} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                              <span>{eq}</span>\n                              {checkAvailability('equipment', eq) ? (\n                                <Badge className=\"bg-green-500\">✅ Available</Badge>\n                              ) : (\n                                <Badge className=\"bg-red-500\">❌ Unavailable</Badge>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex gap-3 mt-6\">\n                        <Button className=\"flex-1 bg-green-600 hover:bg-green-700\">\n                          ⚡ Auto-Arrange\n                        </Button>\n                        <Button className=\"flex-1 bg-blue-600 hover:bg-blue-700\">\n                          📢 Notify Staff\n                        </Button>\n                      </div>\n                    </div>\n\n                    {/* Alternate Hospitals */}\n                    <div className=\"mt-6 bg-white rounded-lg p-4 border border-gray-200\">\n                      <h4 className=\"font-semibold mb-3\">Nearby Hospitals</h4>\n                      <div className=\"space-y-2\">\n                        {ALTERNATE_HOSPITALS.map((hosp, idx) => (\n                          <div key={idx} className=\"p-3 border rounded-lg\">\n                            <p className=\"font-medium\">{hosp.name}</p>\n                            <p className=\"text-sm text-gray-600\">{hosp.distance}</p>\n                            <Badge className={hosp.hasResource ? \"bg-green-500 mt-2\" : \"bg-gray-400 mt-2\"}>\n                              {hosp.hasResource ? \"Has Resources\" : \"Limited\"}\n                            </Badge>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* COMPLETE ANALYSIS TAB */}\n              <TabsContent value=\"analysis\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Key Statistics */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>📈 Key Statistics</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"p-4 bg-blue-50 rounded-lg\">\n                          <p className=\"text-sm text-gray-600\">Total Patients Today</p>\n                          <p className=\"text-3xl font-bold text-blue-600\">42</p>\n                        </div>\n                        <div className=\"p-4 bg-orange-50 rounded-lg\">\n                          <p className=\"text-sm text-gray-600\">Bed Occupancy</p>\n                          <p className=\"text-3xl font-bold text-orange-600\">70%</p>\n                        </div>\n                        <div className=\"p-4 bg-purple-50 rounded-lg\">\n                          <p className=\"text-sm text-gray-600\">Resource Usage</p>\n                          <p className=\"text-3xl font-bold text-purple-600\">68%</p>\n                        </div>\n                        <div className=\"p-4 bg-green-50 rounded-lg\">\n                          <p className=\"text-sm text-gray-600\">Staff on Duty</p>\n                          <p className=\"text-3xl font-bold text-green-600\">24</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Bed Occupancy Chart */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Bed Occupancy</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <PieChart>\n                          <Pie\n                            data={bedOccupancyData}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            innerRadius={60}\n                            outerRadius={80}\n                            paddingAngle={5}\n                            dataKey=\"value\"\n                            label\n                          >\n                            {bedOccupancyData.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.color} />\n                            ))}\n                          </Pie>\n                          <RechartsTooltip />\n                        </PieChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  {/* Resource Usage Chart */}\n                  <Card className=\"lg:col-span-2\">\n                    <CardHeader>\n                      <CardTitle>Resource Usage Analysis</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <BarChart data={resourceUsageData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis />\n                          <RechartsTooltip />\n                          <Legend />\n                          <Bar dataKey=\"usage\" fill=\"#ef4444\" name=\"In Use %\" />\n                          <Bar dataKey=\"available\" fill=\"#10b981\" name=\"Available %\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  {/* AI Insights */}\n                  <Card className=\"lg:col-span-2\">\n                    <CardHeader>\n                      <CardTitle>🤖 AI Insights & Predictions</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {aiInsights.map((insight, idx) => (\n                          <div\n                            key={idx}\n                            className={`p-4 rounded-lg border-l-4 ${\n                              insight.priority === 'high'\n                                ? 'bg-red-50 border-red-500'\n                                : insight.priority === 'medium'\n                                ? 'bg-orange-50 border-orange-500'\n                                : 'bg-blue-50 border-blue-500'\n                            }`}\n                          >\n                            <div className=\"flex items-start gap-3\">\n                              <span className=\"text-2xl\">{insight.icon}</span>\n                              <div className=\"flex-1\">\n                                <p className=\"text-gray-800\">{insight.message}</p>\n                                <Badge\n                                  className={`mt-2 ${\n                                    insight.priority === 'high'\n                                      ? 'bg-red-500'\n                                      : insight.priority === 'medium'\n                                      ? 'bg-orange-500'\n                                      : 'bg-blue-500'\n                                  }`}\n                                >\n                                  {insight.priority.toUpperCase()}\n                                </Badge>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Hospital Status Panel */}\n          <div className=\"space-y-6\">\n            {/* Current Status Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Building2 className=\"w-5 h-5 mr-2\" />\n                  Hospital Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-lg\" data-testid=\"hospital-name\">\n                    {currentHospital.name}\n                  </h3>\n                  <div className=\"flex items-center text-sm text-muted-foreground\">\n                    <MapPin className=\"w-4 h-4 mr-1\" />\n                    <span data-testid=\"hospital-location\">\n                      {currentHospital.lat.toFixed(4)}, {currentHospital.lon.toFixed(4)}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  {currentHospital.acceptingEmergencies ? (\n                    <>\n                      <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                      <Badge className=\"bg-green-100 text-green-800\" data-testid=\"status-accepting\">\n                        Accepting Patients\n                      </Badge>\n                    </>\n                  ) : (\n                    <>\n                      <XCircle className=\"w-5 h-5 text-red-600\" />\n                      <Badge variant=\"destructive\" data-testid=\"status-not-accepting\">\n                        Not Accepting\n                      </Badge>\n                    </>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Available Beds:</span>\n                    <span className=\"font-semibold\" data-testid=\"current-beds\">\n                      {currentHospital.bedsAvailable}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Available Doctors:</span>\n                    <span className=\"font-semibold\" data-testid=\"current-doctors\">\n                      {currentHospital.doctorsAvailable}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Capabilities Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Current Capabilities</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  {currentHospital.capabilities.map(capability => (\n                    <Badge key={capability} variant=\"secondary\" data-testid={`capability-${capability.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {capability}\n                    </Badge>\n                  ))}\n                  {currentHospital.capabilities.length === 0 && (\n                    <p className=\"text-muted-foreground text-sm\">No capabilities configured</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>System Overview</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Hospitals:</span>\n                  <span className=\"font-semibold\" data-testid=\"total-hospitals\">\n                    {hospitals.length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Accepting Patients:</span>\n                  <span className=\"font-semibold\" data-testid=\"accepting-hospitals\">\n                    {hospitals.filter(h => h.acceptingEmergencies).length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Beds:</span>\n                  <span className=\"font-semibold\" data-testid=\"total-beds\">\n                    {hospitals.reduce((sum, h) => sum + (h.bedsAvailable || 0), 0)}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )}\n    </main>\n  );\n}","size_bytes":40024},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/utils/bus.ts":{"content":"import type { AI4HState } from \"../types\";\n\nlet broadcastChannel: BroadcastChannel | null = null;\nconst STORAGE_KEY = \"ai4h_state\";\nconst TAB_KEY = \"ai4h_lastTab\";\n\nexport function initBroadcast(): BroadcastChannel | null {\n  if (typeof window === \"undefined\") return null;\n  \n  try {\n    if (!broadcastChannel && \"BroadcastChannel\" in window) {\n      broadcastChannel = new BroadcastChannel(\"ai4h\");\n    }\n    return broadcastChannel;\n  } catch (error) {\n    console.warn(\"BroadcastChannel not supported\");\n    return null;\n  }\n}\n\nexport function broadcastState(state: AI4HState): void {\n  // Save to localStorage\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n  \n  // Broadcast to other tabs\n  if (broadcastChannel) {\n    broadcastChannel.postMessage({ type: \"STATE_UPDATE\", state });\n  } else {\n    // Fallback: trigger storage event\n    window.dispatchEvent(new StorageEvent(\"storage\", {\n      key: STORAGE_KEY,\n      newValue: JSON.stringify(state),\n    }));\n  }\n}\n\nexport function loadStoredState(): AI4HState | null {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    return stored ? JSON.parse(stored) : null;\n  } catch (error) {\n    console.warn(\"Failed to load stored state\");\n    return null;\n  }\n}\n\nexport function saveLastTab(tab: string): void {\n  localStorage.setItem(TAB_KEY, tab);\n}\n\nexport function loadLastTab(): string {\n  return localStorage.getItem(TAB_KEY) || \"user\";\n}\n\nexport function onStateUpdate(callback: (state: AI4HState) => void): () => void {\n  const channel = initBroadcast();\n  \n  const handlers: Array<() => void> = [];\n  \n  if (channel) {\n    const handleMessage = (event: MessageEvent) => {\n      if (event.data.type === \"STATE_UPDATE\") {\n        callback(event.data.state);\n      }\n    };\n    channel.addEventListener(\"message\", handleMessage);\n    handlers.push(() => channel.removeEventListener(\"message\", handleMessage));\n  }\n  \n  // Fallback: listen to storage events\n  const handleStorage = (event: StorageEvent) => {\n    if (event.key === STORAGE_KEY && event.newValue) {\n      try {\n        const state = JSON.parse(event.newValue);\n        callback(state);\n      } catch (error) {\n        console.warn(\"Failed to parse storage state\");\n      }\n    }\n  };\n  window.addEventListener(\"storage\", handleStorage);\n  handlers.push(() => window.removeEventListener(\"storage\", handleStorage));\n  \n  return () => handlers.forEach(cleanup => cleanup());\n}\n","size_bytes":2421},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/repo/selectRepo.ts":{"content":"import { InMemoryRepo } from './inMemory';\nimport { SupabaseRepo } from './supabase';\nimport type { Repo } from './index';\n\nlet repoInstance: Repo | null = null;\n\nexport function selectRepo(): Repo {\n  if (!repoInstance) {\n    const useSupabase = process.env.USE_SUPABASE === '1';\n    \n    if (useSupabase) {\n      console.log('🗄️  Using SupabaseRepo for data persistence');\n      repoInstance = new SupabaseRepo();\n    } else {\n      console.log('💾 Using InMemoryRepo for data persistence');\n      repoInstance = new InMemoryRepo();\n    }\n  }\n  \n  return repoInstance;\n}\n\n// Helper to reset repo instance (useful for testing or config changes)\nexport function resetRepo(): void {\n  repoInstance = null;\n}","size_bytes":713},"client/src/store/ambulance-driver-store.ts":{"content":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport type { EnhancedEmergency } from \"./multi-emergency-store\";\n\nexport interface AmbulancePosition {\n  id?: number;\n  ambulanceId: string;\n  lat: number;\n  lon: number;\n  ts: string;\n}\n\nexport interface ShiftData {\n  shiftId: string;\n  ambulanceId: string;\n  driverId: string;\n  startTime: string;\n  endTime?: string;\n  status: 'active' | 'ended';\n}\n\nexport interface AssignmentRequest {\n  emergencyId: string;\n  patientName: string;\n  location: string;\n  triageLevel: 'red' | 'yellow' | 'green';\n  estimatedDistance: number;\n  requestedAt: string;\n  expiresAt: string;\n}\n\nexport interface NavigationSession {\n  emergencyId: string;\n  destination: { lat: number; lon: number; address: string };\n  startedAt: string;\n  estimatedArrival?: string;\n  status: 'navigating' | 'arrived' | 'rerouted';\n}\n\ninterface AmbulanceDriverState {\n  // Shift Management\n  currentShift: ShiftData | null;\n  shiftHistory: ShiftData[];\n  \n  // Assignment Management  \n  availableAssignments: AssignmentRequest[];\n  acceptedAssignments: string[]; // Emergency IDs\n  rejectedAssignments: string[]; // Emergency IDs\n  \n  // Position Tracking\n  currentPosition: { lat: number; lon: number } | null;\n  positionHistory: AmbulancePosition[];\n  offlinePositionQueue: Omit<AmbulancePosition, 'id'>[];\n  isTrackingEnabled: boolean;\n  \n  // Navigation\n  activeNavigation: NavigationSession | null;\n  \n  // Driver Info\n  driverId: string;\n  ambulanceId: string;\n  isOnline: boolean;\n}\n\ninterface AmbulanceDriverStore extends AmbulanceDriverState {\n  // Shift Actions\n  startShift: (driverId: string, ambulanceId: string) => void;\n  endShift: () => void;\n  \n  // Assignment Actions\n  acceptAssignment: (emergencyId: string) => void;\n  rejectAssignment: (emergencyId: string) => void;\n  addAssignmentRequest: (assignment: AssignmentRequest) => void;\n  removeAssignmentRequest: (emergencyId: string) => void;\n  \n  // Position Actions\n  updatePosition: (lat: number, lon: number) => void;\n  togglePositionTracking: () => void;\n  syncOfflinePositions: () => Promise<void>;\n  \n  // Navigation Actions\n  startNavigation: (emergency: EnhancedEmergency) => void;\n  endNavigation: () => void;\n  handleReroute: (newDestination: { lat: number; lon: number; address: string }) => void;\n  \n  // Utility Actions\n  setOnlineStatus: (online: boolean) => void;\n  initializeDriver: (driverId: string, ambulanceId: string) => void;\n}\n\nconst initialState: AmbulanceDriverState = {\n  currentShift: null,\n  shiftHistory: [],\n  availableAssignments: [],\n  acceptedAssignments: [],\n  rejectedAssignments: [],\n  currentPosition: null,\n  positionHistory: [],\n  offlinePositionQueue: [],\n  isTrackingEnabled: false,\n  activeNavigation: null,\n  driverId: \"\",\n  ambulanceId: \"\",\n  isOnline: false,\n};\n\nexport const useAmbulanceDriverStore = create<AmbulanceDriverStore>()(\n  persist(\n    (set, get) => ({\n      ...initialState,\n\n      startShift: (driverId: string, ambulanceId: string) => {\n        const now = new Date().toISOString();\n        const shiftId = `shift_${Date.now()}`;\n        \n        const newShift: ShiftData = {\n          shiftId,\n          ambulanceId,\n          driverId,\n          startTime: now,\n          status: 'active'\n        };\n\n        set((state) => ({\n          currentShift: newShift,\n          shiftHistory: [...state.shiftHistory, newShift],\n          driverId,\n          ambulanceId,\n          isOnline: true,\n          isTrackingEnabled: true\n        }));\n\n        // Start position tracking\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition((position) => {\n            const { latitude, longitude } = position.coords;\n            if (latitude !== undefined && longitude !== undefined) {\n              get().updatePosition(latitude, longitude);\n            }\n          });\n        }\n      },\n\n      endShift: () => {\n        const currentShift = get().currentShift;\n        if (!currentShift) return;\n\n        const endedShift = {\n          ...currentShift,\n          endTime: new Date().toISOString(),\n          status: 'ended' as const\n        };\n\n        set((state) => ({\n          currentShift: null,\n          shiftHistory: state.shiftHistory.map(shift => \n            shift.shiftId === currentShift.shiftId ? endedShift : shift\n          ),\n          isOnline: false,\n          isTrackingEnabled: false,\n          activeNavigation: null,\n          acceptedAssignments: [],\n          availableAssignments: []\n        }));\n      },\n\n      acceptAssignment: (emergencyId: string) => {\n        set((state) => ({\n          acceptedAssignments: [...state.acceptedAssignments, emergencyId],\n          availableAssignments: state.availableAssignments.filter(\n            assignment => assignment.emergencyId !== emergencyId\n          )\n        }));\n      },\n\n      rejectAssignment: (emergencyId: string) => {\n        set((state) => ({\n          rejectedAssignments: [...state.rejectedAssignments, emergencyId],\n          availableAssignments: state.availableAssignments.filter(\n            assignment => assignment.emergencyId !== emergencyId\n          )\n        }));\n      },\n\n      addAssignmentRequest: (assignment: AssignmentRequest) => {\n        const state = get();\n        \n        // Don't add if already accepted/rejected or expired\n        if (state.acceptedAssignments.includes(assignment.emergencyId) ||\n            state.rejectedAssignments.includes(assignment.emergencyId) ||\n            new Date(assignment.expiresAt) < new Date()) {\n          return;\n        }\n\n        set((state) => ({\n          availableAssignments: [...state.availableAssignments.filter(\n            a => a.emergencyId !== assignment.emergencyId\n          ), assignment]\n        }));\n      },\n\n      removeAssignmentRequest: (emergencyId: string) => {\n        set((state) => ({\n          availableAssignments: state.availableAssignments.filter(\n            assignment => assignment.emergencyId !== emergencyId\n          )\n        }));\n      },\n\n      updatePosition: (lat: number, lon: number) => {\n        const state = get();\n        if (!state.isTrackingEnabled || !state.currentShift) return;\n\n        const now = new Date().toISOString();\n        const newPosition: Omit<AmbulancePosition, 'id'> = {\n          ambulanceId: state.ambulanceId,\n          lat,\n          lon,\n          ts: now\n        };\n\n        set((state) => ({\n          currentPosition: { lat, lon },\n          positionHistory: [...state.positionHistory.slice(-50), { ...newPosition, id: Date.now() } as AmbulancePosition],\n          offlinePositionQueue: [...state.offlinePositionQueue, newPosition]\n        }));\n\n        // Try to sync positions if online\n        if (navigator.onLine) {\n          get().syncOfflinePositions();\n        }\n      },\n\n      togglePositionTracking: () => {\n        set((state) => ({\n          isTrackingEnabled: !state.isTrackingEnabled\n        }));\n      },\n\n      syncOfflinePositions: async () => {\n        const state = get();\n        if (state.offlinePositionQueue.length === 0) return;\n\n        try {\n          // Send positions to backend\n          const response = await fetch('/api/ambulance/positions', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ positions: state.offlinePositionQueue })\n          });\n\n          if (response.ok) {\n            // Clear offline queue on successful sync\n            set((state) => ({\n              offlinePositionQueue: []\n            }));\n          }\n        } catch (error) {\n          console.log('Failed to sync positions, will retry later:', error);\n        }\n      },\n\n      startNavigation: (emergency: EnhancedEmergency) => {\n        if (!emergency.location) return;\n\n        const navigationSession: NavigationSession = {\n          emergencyId: emergency.id,\n          destination: {\n            lat: emergency.location.lat,\n            lon: emergency.location.lon,\n            address: emergency.location.address || 'Emergency Location'\n          },\n          startedAt: new Date().toISOString(),\n          status: 'navigating'\n        };\n\n        set({ activeNavigation: navigationSession });\n\n        // Try to open navigation app\n        const { lat, lon } = emergency.location;\n        const destination = `${lat},${lon}`;\n        \n        // Try different navigation apps\n        const mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${destination}`;\n        const appleUrl = `maps://maps.apple.com/?daddr=${lat},${lon}`;\n        \n        if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {\n          window.open(appleUrl);\n        } else {\n          window.open(mapsUrl);\n        }\n      },\n\n      endNavigation: () => {\n        const state = get();\n        if (!state.activeNavigation) return;\n\n        set({\n          activeNavigation: {\n            ...state.activeNavigation,\n            status: 'arrived'\n          }\n        });\n\n        // Clear navigation after a delay\n        setTimeout(() => {\n          set({ activeNavigation: null });\n        }, 5000);\n      },\n\n      handleReroute: (newDestination: { lat: number; lon: number; address: string }) => {\n        const state = get();\n        if (!state.activeNavigation) return;\n\n        set({\n          activeNavigation: {\n            ...state.activeNavigation,\n            destination: newDestination,\n            status: 'rerouted'\n          }\n        });\n      },\n\n      setOnlineStatus: (online: boolean) => {\n        set({ isOnline: online });\n        \n        if (online) {\n          // Sync offline positions when coming back online\n          get().syncOfflinePositions();\n        }\n      },\n\n      initializeDriver: (driverId: string, ambulanceId: string) => {\n        set({\n          driverId,\n          ambulanceId\n        });\n      }\n    }),\n    {\n      name: \"ambulance-driver-store\",\n      partialize: (state) => ({\n        shiftHistory: state.shiftHistory,\n        positionHistory: state.positionHistory.slice(-100), // Keep last 100 positions\n        driverId: state.driverId,\n        ambulanceId: state.ambulanceId,\n        offlinePositionQueue: state.offlinePositionQueue\n      })\n    }\n  )\n);\n\n// Position tracking utility\nlet positionWatcher: number | null = null;\n\nexport const startPositionTracking = () => {\n  if (!navigator.geolocation || positionWatcher) return;\n\n  const updatePosition = useAmbulanceDriverStore.getState().updatePosition;\n  \n  positionWatcher = navigator.geolocation.watchPosition(\n    (position) => {\n      const { latitude, longitude } = position.coords;\n      if (latitude !== undefined && longitude !== undefined) {\n        updatePosition(latitude, longitude);\n      }\n    },\n    (error) => {\n      console.log('Position tracking error:', error);\n    },\n    {\n      enableHighAccuracy: true,\n      maximumAge: 30000, // 30 seconds\n      timeout: 10000 // 10 seconds\n    }\n  );\n};\n\nexport const stopPositionTracking = () => {\n  if (positionWatcher) {\n    navigator.geolocation.clearWatch(positionWatcher);\n    positionWatcher = null;\n  }\n};\n\n// Online/offline status monitoring\nif (typeof window !== 'undefined') {\n  const setOnlineStatus = useAmbulanceDriverStore.getState().setOnlineStatus;\n  \n  window.addEventListener('online', () => setOnlineStatus(true));\n  window.addEventListener('offline', () => setOnlineStatus(false));\n}","size_bytes":11377},"server/logic/routing.ts":{"content":"import type { Hospital, Emergency, HospitalCapability } from '@shared/schema';\n\nexport interface RoutingOptions {\n  maxDistanceKm?: number;\n  speedKmh?: number;\n  requireAllCapabilities?: boolean;\n}\n\nexport interface HospitalMatch {\n  hospital: Hospital;\n  distance: number;\n  eta: number;\n  capabilityMatch: number; // 0-1 (percentage of needs met)\n  available: boolean;\n  reason?: string;\n}\n\nexport interface RoutingResult {\n  primary: HospitalMatch | null;\n  alternatives: HospitalMatch[];\n  reason: string;\n}\n\n/**\n * Pick the best hospital for an emergency based on capabilities, capacity, and location\n */\nexport function pickHospital(\n  emergency: Emergency, \n  hospitals: Hospital[], \n  options: RoutingOptions = {}\n): RoutingResult {\n  const {\n    maxDistanceKm = 50,\n    speedKmh = 30,\n    requireAllCapabilities = true\n  } = options;\n\n  if (!emergency.lat || !emergency.lon) {\n    return {\n      primary: null,\n      alternatives: [],\n      reason: 'Emergency location not available'\n    };\n  }\n\n  if (hospitals.length === 0) {\n    return {\n      primary: null,\n      alternatives: [],\n      reason: 'No hospitals available'\n    };\n  }\n\n  const needs = emergency.needs || [];\n  const matches: HospitalMatch[] = [];\n\n  for (const hospital of hospitals) {\n    // Calculate distance and ETA\n    const distance = calculateHaversineDistance(\n      emergency.lat!, emergency.lon!,\n      hospital.lat, hospital.lon\n    );\n\n    if (distance > maxDistanceKm) {\n      continue; // Skip hospitals too far away\n    }\n\n    const eta = Math.ceil((distance / speedKmh) * 60); // Convert to minutes\n\n    // Check capability matching\n    const capabilityMatch = calculateCapabilityMatch(needs, hospital.capabilities || []);\n    \n    // Determine if hospital meets requirements\n    const meetsCapabilities = requireAllCapabilities \n      ? capabilityMatch === 1.0 || needs.length === 0\n      : capabilityMatch > 0.5;\n\n    // Check availability (handle null values)\n    const hasCapacity = (hospital.bedsAvailable ?? 0) > 0;\n    const isAccepting = hospital.acceptingEmergencies ?? true;\n    const available = hasCapacity && isAccepting && meetsCapabilities;\n\n    let reason = '';\n    if (!hasCapacity) reason = 'No available beds';\n    else if (!isAccepting) reason = 'Not accepting emergencies';\n    else if (!meetsCapabilities) reason = 'Insufficient capabilities';\n\n    matches.push({\n      hospital,\n      distance,\n      eta,\n      capabilityMatch,\n      available,\n      reason: reason || undefined\n    });\n  }\n\n  // Sort by priority: available first, then by capability match, then by distance\n  matches.sort((a, b) => {\n    // Available hospitals first\n    if (a.available && !b.available) return -1;\n    if (!a.available && b.available) return 1;\n\n    // Then by capability match (higher is better)\n    if (Math.abs(a.capabilityMatch - b.capabilityMatch) > 0.1) {\n      return b.capabilityMatch - a.capabilityMatch;\n    }\n\n    // Finally by distance (shorter is better)\n    return a.distance - b.distance;\n  });\n\n  const primary = matches.length > 0 ? matches[0] : null;\n  const alternatives = matches.slice(1, 6); // Top 5 alternatives\n\n  let reason = '';\n  if (!primary) {\n    reason = 'No suitable hospitals found within range';\n  } else if (primary.available) {\n    reason = `Assigned to ${primary.hospital.name} (${primary.eta} min ETA)`;\n  } else {\n    reason = `Best match ${primary.hospital.name} unavailable: ${primary.reason}. Auto-routing to alternatives.`;\n  }\n\n  return {\n    primary,\n    alternatives,\n    reason\n  };\n}\n\n/**\n * Calculate capability match score (0.0 to 1.0)\n */\nfunction calculateCapabilityMatch(needs: string[], capabilities: string[]): number {\n  if (needs.length === 0) return 1.0; // No specific needs\n\n  const matchingCapabilities = needs.filter(need => \n    capabilities.includes(need as HospitalCapability)\n  );\n\n  return matchingCapabilities.length / needs.length;\n}\n\n/**\n * Calculate distance between two points using Haversine formula\n * Returns distance in kilometers\n */\nexport function calculateHaversineDistance(\n  lat1: number, \n  lon1: number, \n  lat2: number, \n  lon2: number\n): number {\n  const R = 6371; // Earth's radius in km\n  const dLat = toRadians(lat2 - lat1);\n  const dLon = toRadians(lon2 - lon1);\n  \n  const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * \n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\n/**\n * Calculate ETA in minutes based on distance and speed\n */\nexport function calculateETA(distanceKm: number, speedKmh = 30): number {\n  return Math.ceil((distanceKm / speedKmh) * 60);\n}\n\n/**\n * Convert degrees to radians\n */\nfunction toRadians(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\n/**\n * Find alternative route when primary hospital cannot accept\n */\nexport function findAlternativeRoute(\n  emergency: Emergency,\n  hospitals: Hospital[],\n  excludeHospitalIds: string[] = []\n): RoutingResult {\n  // Filter out excluded hospitals\n  const availableHospitals = hospitals.filter(h => \n    !excludeHospitalIds.includes(h.id)\n  );\n\n  // Try with relaxed capability requirements first\n  let result = pickHospital(emergency, availableHospitals, {\n    requireAllCapabilities: false,\n    maxDistanceKm: 75, // Expand search radius\n    speedKmh: 35 // Assume faster response for rerouting\n  });\n\n  if (!result.primary || !result.primary.available) {\n    // If still no match, try any hospital within extended range\n    result = pickHospital(emergency, availableHospitals, {\n      requireAllCapabilities: false,\n      maxDistanceKm: 100,\n      speedKmh: 40\n    });\n  }\n\n  return result;\n}","size_bytes":5714},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/StatusChip.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport type { Status } from \"../types\";\n\ninterface StatusChipProps {\n  status: Status;\n  className?: string;\n}\n\nconst statusConfig = {\n  NEW: { label: \"NEW\", className: \"bg-red-600 text-white\" },\n  ACK: { label: \"ACK\", className: \"bg-amber-500 text-white\" },\n  ENROUTE: { label: \"EN ROUTE\", className: \"bg-sky-600 text-white\" },\n  ARRIVED: { label: \"ARRIVED\", className: \"bg-green-600 text-white\" },\n};\n\nexport function StatusChip({ status, className }: StatusChipProps) {\n  if (!status) return null;\n\n  const config = statusConfig[status];\n  \n  return (\n    <span \n      className={cn(\"px-3 py-1 rounded-full text-sm font-medium\", config.className, className)}\n      data-testid={`status-${status.toLowerCase()}`}\n    >\n      {config.label}\n    </span>\n  );\n}\n","size_bytes":795},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, json, integer, doublePrecision, boolean, bigserial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Keep existing tables with same ID types (varchar)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Profiles for user roles and info\nexport const profiles = pgTable(\"profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  role: text(\"role\").notNull(),\n  name: text(\"name\"),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Hospitals with capabilities and capacity\nexport const hospitals = pgTable(\"hospitals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  lat: doublePrecision(\"lat\").notNull(),\n  lon: doublePrecision(\"lon\").notNull(),\n  bedsAvailable: integer(\"beds_available\").default(0),\n  doctorsAvailable: integer(\"doctors_available\").default(0),\n  capabilities: text(\"capabilities\").array().default(sql`'{}'::text[]`),\n  acceptingEmergencies: boolean(\"accepting_emergencies\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Enhanced emergencies table (keep existing varchar ID, add new fields)\nexport const emergencies = pgTable(\"emergencies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: text(\"patient_id\").notNull(),\n  lat: doublePrecision(\"lat\"),\n  lon: doublePrecision(\"lon\"),\n  type: text(\"type\"),\n  needs: text(\"needs\").array().default(sql`'{}'::text[]`),\n  triageScore: integer(\"triage_score\").default(0),\n  status: text(\"status\").default('active'),\n  assignedHospitalId: varchar(\"assigned_hospital_id\"),\n  reroutedToId: varchar(\"rerouted_to_id\"), \n  assignedEtaMin: integer(\"assigned_eta_min\"),\n  duplicateOf: varchar(\"duplicate_of\"),\n  vitals: json(\"vitals\"),\n  \n  // Keep existing fields for compatibility\n  etaMin: integer(\"eta_min\"),\n  location: json(\"location\"),\n  history: json(\"history\").notNull(),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Incident events for timeline tracking\nexport const incidentEvents = pgTable(\"incident_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  emergencyId: varchar(\"emergency_id\").notNull(),\n  kind: text(\"kind\").notNull(),\n  data: json(\"data\"),\n  ts: timestamp(\"ts\").defaultNow(),\n});\n\n// Ambulance position tracking\nexport const ambulancePositions = pgTable(\"ambulance_positions\", {\n  id: bigserial(\"id\", { mode: 'number' }).primaryKey(),\n  ambulanceId: varchar(\"ambulance_id\").notNull(),\n  lat: doublePrecision(\"lat\").notNull(),\n  lon: doublePrecision(\"lon\").notNull(),\n  ts: timestamp(\"ts\").defaultNow(),\n});\n\n// Keep existing schemas for compatibility\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertEmergencySchema = createInsertSchema(emergencies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// New schemas for enhanced features\nexport const insertProfileSchema = createInsertSchema(profiles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertHospitalSchema = createInsertSchema(hospitals).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertIncidentEventSchema = createInsertSchema(incidentEvents).omit({\n  id: true,\n  ts: true,\n});\n\nexport const insertAmbulancePositionSchema = createInsertSchema(ambulancePositions).omit({\n  id: true,\n  ts: true,\n});\n\n// Type exports\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertEmergency = z.infer<typeof insertEmergencySchema>;\nexport type Emergency = typeof emergencies.$inferSelect;\n\nexport type InsertProfile = z.infer<typeof insertProfileSchema>;\nexport type Profile = typeof profiles.$inferSelect;\nexport type InsertHospital = z.infer<typeof insertHospitalSchema>;\nexport type Hospital = typeof hospitals.$inferSelect;\nexport type InsertIncidentEvent = z.infer<typeof insertIncidentEventSchema>;\nexport type IncidentEvent = typeof incidentEvents.$inferSelect;\nexport type InsertAmbulancePosition = z.infer<typeof insertAmbulancePositionSchema>;\nexport type AmbulancePosition = typeof ambulancePositions.$inferSelect;\n\n// Keep existing frontend types for compatibility\nexport type Status = \"NEW\" | \"ACK\" | \"ENROUTE\" | \"ARRIVED\" | null;\n\nexport type HistoryItem = {\n  ts: string;\n  actor: \"USER\" | \"AMBULANCE\" | \"HOSPITAL\";\n  type: \"SOS_NEW\" | \"AMB_ACK\" | \"AMB_ENROUTE\" | \"AMB_ARRIVED\" | \"HOSP_PREP\";\n  note?: string;\n};\n\nexport type Patient = {\n  id: string;\n  name: string;\n  age: number;\n  blood: string;\n  conditions: string[];\n  allergies: string[];\n  guardian: {\n    name: string;\n    phone: string;\n  };\n};\n\nexport type GeoLocation = {\n  lat?: number;\n  lon?: number;\n  address?: string;\n};\n\nexport type AI4HState = {\n  status: Status;\n  etaMin: number | null;\n  patient: Patient | null;\n  geo?: GeoLocation;\n  history: HistoryItem[];\n  lastEventTs?: string;\n};\n\n// New types for enhanced features\nexport type TriageLevel = 'red' | 'yellow' | 'green';\n\nexport type EmergencyStatus = 'active' | 'assigned' | 'enroute' | 'arrived' | 'completed' | 'cancelled';\n\nexport type HospitalCapability = 'ICU' | 'Ventilator' | 'Cardio' | 'Peds' | 'Neuro';\n\nexport type UserRole = 'patient' | 'driver' | 'hospital' | 'admin';","size_bytes":5586},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/views/TimelineDrawer.tsx":{"content":"import { useState } from \"react\";\nimport { X, Clock, MapPin, Hospital, User, AlertTriangle, Activity, MessageSquare, Plus, ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { useMultiEmergencyStore, type EnhancedEmergency, type EmergencyEvent } from \"../store/multi-emergency-store\";\nimport { formatDistanceToNow, format } from \"date-fns\";\n\ninterface TimelineDrawerProps {\n  emergency: EnhancedEmergency | null;\n  open: boolean;\n  onClose: () => void;\n}\n\nconst eventIcons = {\n  created: AlertTriangle,\n  assigned: Hospital,\n  acknowledged: User,\n  enroute: ArrowRight,\n  arrived: MapPin,\n  completed: Activity,\n  rerouted: ArrowRight,\n  note: MessageSquare,\n} as const;\n\nconst eventColors = {\n  created: \"text-red-500\",\n  assigned: \"text-blue-500\", \n  acknowledged: \"text-orange-500\",\n  enroute: \"text-purple-500\",\n  arrived: \"text-green-500\",\n  completed: \"text-gray-500\",\n  rerouted: \"text-yellow-500\",\n  note: \"text-gray-400\",\n} as const;\n\nconst statusConfig = {\n  active: { label: 'Active', color: 'bg-red-100 text-red-800' },\n  assigned: { label: 'Assigned', color: 'bg-orange-100 text-orange-800' },\n  enroute: { label: 'En Route', color: 'bg-blue-100 text-blue-800' },\n  arrived: { label: 'Arrived', color: 'bg-green-100 text-green-800' },\n  completed: { label: 'Completed', color: 'bg-gray-100 text-gray-800' },\n  cancelled: { label: 'Cancelled', color: 'bg-gray-100 text-gray-800' },\n};\n\nconst triageConfig = {\n  red: { label: 'Critical', color: 'bg-red-500 text-white' },\n  yellow: { label: 'Urgent', color: 'bg-yellow-500 text-white' },\n  green: { label: 'Stable', color: 'bg-green-500 text-white' },\n};\n\nexport function TimelineDrawer({ emergency, open, onClose }: TimelineDrawerProps) {\n  const { addTimelineEvent } = useMultiEmergencyStore();\n  const [newNote, setNewNote] = useState(\"\");\n  const [isAddingNote, setIsAddingNote] = useState(false);\n\n  if (!emergency) return null;\n\n  const handleAddNote = () => {\n    if (!newNote.trim() || !emergency) return;\n    \n    addTimelineEvent(emergency.id, {\n      ts: new Date().toISOString(),\n      actor: 'SYSTEM',\n      type: 'note',\n      message: newNote.trim(),\n      data: { added_by: 'admin' }\n    });\n    \n    setNewNote(\"\");\n    setIsAddingNote(false);\n  };\n\n  const timeAgo = formatDistanceToNow(new Date(emergency.createdAt), { addSuffix: true });\n\n  return (\n    <Sheet open={open} onOpenChange={onClose}>\n      <SheetContent side=\"right\" className=\"w-full sm:max-w-xl overflow-y-auto\" data-testid=\"timeline-drawer\">\n        <SheetHeader className=\"pb-6\">\n          <SheetTitle className=\"flex items-start justify-between\">\n            <div>\n              <div className=\"text-lg font-semibold\" data-testid=\"emergency-title\">\n                {emergency.type}\n              </div>\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                Emergency ID: {emergency.id.slice(-8)}\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-drawer\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </SheetTitle>\n        </SheetHeader>\n\n        <div className=\"space-y-6\">\n          {/* Emergency Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Emergency Overview</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Status</span>\n                <Badge className={statusConfig[emergency.status].color} data-testid=\"emergency-status\">\n                  {statusConfig[emergency.status].label}\n                </Badge>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Triage Level</span>\n                <Badge className={triageConfig[emergency.triageLevel].color} data-testid=\"emergency-triage\">\n                  {triageConfig[emergency.triageLevel].label} ({emergency.triageScore})\n                </Badge>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Created</span>\n                <span className=\"text-sm font-medium\" data-testid=\"emergency-created\">\n                  {timeAgo}\n                </span>\n              </div>\n\n              {emergency.duplicateOf && (\n                <div className=\"p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n                  <p className=\"text-sm text-orange-800\">\n                    ⚠️ This emergency may be a duplicate of {emergency.duplicateOf.slice(-8)}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Patient Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Patient Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <User className=\"w-4 h-4 text-muted-foreground\" />\n                <div>\n                  <p className=\"text-sm font-medium\" data-testid=\"patient-name\">\n                    {emergency.patient.name}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Age: {emergency.patient.age}, Blood Type: {emergency.patient.blood}\n                  </p>\n                </div>\n              </div>\n\n              {emergency.patient.conditions.length > 0 && (\n                <div className=\"space-y-1\">\n                  <p className=\"text-xs font-medium text-muted-foreground\">Medical Conditions:</p>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {emergency.patient.conditions.map((condition, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                        {condition}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {emergency.patient.allergies.length > 0 && (\n                <div className=\"space-y-1\">\n                  <p className=\"text-xs font-medium text-muted-foreground\">Allergies:</p>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {emergency.patient.allergies.map((allergy, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-xs bg-red-50 text-red-700 border-red-200\">\n                        {allergy}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Location */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Location</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-start space-x-3\">\n                <MapPin className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm\" data-testid=\"emergency-location\">\n                    {emergency.location.address || \n                     `${emergency.location.lat}, ${emergency.location.lon}`}\n                  </p>\n                  {emergency.location.lat && emergency.location.lon && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {emergency.location.lat}, {emergency.location.lon}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Hospital Assignment */}\n          {emergency.assignedHospital && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Assigned Hospital</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-start space-x-3\">\n                  <Hospital className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\" data-testid=\"assigned-hospital\">\n                      {emergency.assignedHospital.name}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      ETA: {emergency.assignedHospital.eta} minutes\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Vitals */}\n          {emergency.vitals && Object.keys(emergency.vitals).length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Vital Signs</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  {emergency.vitals.hr && (\n                    <div>\n                      <span className=\"text-muted-foreground\">Heart Rate</span>\n                      <p className=\"font-medium\" data-testid=\"vital-hr\">{emergency.vitals.hr} bpm</p>\n                    </div>\n                  )}\n                  {emergency.vitals.spo2 && (\n                    <div>\n                      <span className=\"text-muted-foreground\">SpO2</span>\n                      <p className=\"font-medium\" data-testid=\"vital-spo2\">{emergency.vitals.spo2}%</p>\n                    </div>\n                  )}\n                  {emergency.vitals.sbp && (\n                    <div>\n                      <span className=\"text-muted-foreground\">Blood Pressure</span>\n                      <p className=\"font-medium\" data-testid=\"vital-bp\">{emergency.vitals.sbp} mmHg</p>\n                    </div>\n                  )}\n                  {emergency.vitals.gcs && (\n                    <div>\n                      <span className=\"text-muted-foreground\">GCS</span>\n                      <p className=\"font-medium\" data-testid=\"vital-gcs\">{emergency.vitals.gcs}/15</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Timeline */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-sm\">Timeline</CardTitle>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsAddingNote(!isAddingNote)}\n                  data-testid=\"button-add-note\"\n                >\n                  <Plus className=\"w-3 h-3 mr-1\" />\n                  Add Note\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\" data-testid=\"timeline-events\">\n              {/* Add Note Form */}\n              {isAddingNote && (\n                <div className=\"space-y-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <Textarea\n                    placeholder=\"Add a note to this emergency timeline...\"\n                    value={newNote}\n                    onChange={(e) => setNewNote(e.target.value)}\n                    className=\"min-h-[80px]\"\n                    data-testid=\"textarea-note\"\n                  />\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setIsAddingNote(false);\n                        setNewNote(\"\");\n                      }}\n                      data-testid=\"button-cancel-note\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      onClick={handleAddNote}\n                      disabled={!newNote.trim()}\n                      data-testid=\"button-save-note\"\n                    >\n                      Add Note\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Timeline Events */}\n              <div className=\"space-y-4\">\n                {emergency.timeline\n                  .sort((a, b) => new Date(b.ts).getTime() - new Date(a.ts).getTime())\n                  .map((event, index) => {\n                    const Icon = eventIcons[event.type] || Activity;\n                    const iconColor = eventColors[event.type] || \"text-gray-400\";\n                    \n                    return (\n                      <div key={event.id} className=\"flex space-x-3\" data-testid={`timeline-event-${event.type}`}>\n                        <div className=\"flex flex-col items-center\">\n                          <div className={`p-1 rounded-full bg-white shadow-sm ${iconColor}`}>\n                            <Icon className=\"w-3 h-3\" />\n                          </div>\n                          {index < emergency.timeline.length - 1 && (\n                            <div className=\"w-px h-8 bg-gray-200 dark:bg-gray-700 mt-1\" />\n                          )}\n                        </div>\n                        <div className=\"flex-1 min-w-0 pb-4\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                              {event.actor.toLowerCase()}\n                            </Badge>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {format(new Date(event.ts), 'MMM d, HH:mm:ss')}\n                            </span>\n                          </div>\n                          <p className=\"text-sm\" data-testid={`event-message-${event.type}`}>\n                            {event.message}\n                          </p>\n                          {event.data && Object.keys(event.data).length > 0 && (\n                            <div className=\"mt-2 p-2 bg-gray-50 dark:bg-gray-800 rounded text-xs\">\n                              <pre className=\"text-muted-foreground overflow-x-auto\">\n                                {JSON.stringify(event.data, null, 2)}\n                              </pre>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n\n              {emergency.timeline.length === 0 && (\n                <p className=\"text-center py-4 text-sm text-muted-foreground\">\n                  No timeline events yet.\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}","size_bytes":15217},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/TabBar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { saveLastTab } from \"../utils/bus\";\nimport type { TabType } from \"../types\";\n\ninterface TabBarProps {\n  activeTab: TabType;\n  onTabChange: (tab: TabType) => void;\n}\n\nconst tabs = [\n  { id: \"user\", label: \"User\", icon: \"fas fa-user\" },\n  { id: \"ambulance\", label: \"Ambulance\", icon: \"fas fa-ambulance\" },\n  { id: \"hospital\", label: \"Hospital\", icon: \"fas fa-hospital\" },\n  { id: \"admin\", label: \"Admin\", icon: \"fas fa-cog\" },\n] as const;\n\nexport function TabBar({ activeTab, onTabChange }: TabBarProps) {\n  const handleTabClick = (tabId: TabType) => {\n    onTabChange(tabId);\n    saveLastTab(tabId);\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border\" data-testid=\"tab-bar\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex space-x-1\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => handleTabClick(tab.id as TabType)}\n              className={cn(\n                \"px-6 py-3 text-sm font-medium rounded-t-lg transition-all duration-200\",\n                activeTab === tab.id\n                  ? \"bg-gradient-to-r from-red-600 to-red-700 text-white\"\n                  : \"text-muted-foreground hover:text-foreground hover:bg-accent\"\n              )}\n              data-testid={`tab-${tab.id}`}\n            >\n              <i className={`${tab.icon} mr-2`}></i>\n              {tab.label}\n            </button>\n          ))}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1527},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154}},"version":2}