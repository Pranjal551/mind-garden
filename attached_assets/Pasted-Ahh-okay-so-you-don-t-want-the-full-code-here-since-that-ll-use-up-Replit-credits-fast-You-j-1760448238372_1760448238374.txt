Ahh okay 😅 — so you don’t want the full code here (since that’ll use up Replit credits fast).
You just want a *super-optimized, single Replit AI prompt* that’ll give you *the full working hospital interface* (Emergency + Analysis + AI pre-arrangement) *in one go*, but without wasting your credits.

Here’s the *perfect short but detailed prompt* — it tells Replit’s AI everything it needs to build the system efficiently 👇

---

### 🧠 *Paste This in Replit AI Prompt*

> Extend my existing *Hospital Dashboard (React + Tailwind)* to include these new connected sections inside the *Hospital tab* only — keep all other pages (User, Ambulance, etc.) unchanged.
>
> ---
>
> *1. Emergency Section*
>
> * Add a tab/button called *“Emergency.”*
> * When clicked, show a panel for *selected patient* with:
>
>   * Patient details (Name, Age, Condition, Blood Type, Severity).
>   * AI-generated *Pre-Arrangement List*: shows what’s needed (blood type, medicines, equipment) based on condition type.
>   * Next to each item, show ✅ Available or ❌ Unavailable using dummy data.
>   * If unavailable → show “Suggest Alternate Hospital” or “Request Support” button.
>   * Add “Auto-Arrange” and “Notify Staff” buttons to simulate hospital actions.
> * Use dummy data arrays for patients, conditions, and inventory. No API calls.
> * Use Tailwind cards, red/orange for emergency highlights.
>
> ---
>
> *2. Complete Analysis Section*
>
> * Add a tab/button called *“Complete Analysis.”*
> * Show key statistics: total patients today, bed occupancy %, resource usage %, etc.
> * Include simple *charts* (Pie or Bar) using *Recharts*.
> * Add an *AI Insights box* showing short messages like:
>
>   * “ICU occupancy predicted to reach 90% in 6 hours.”
>   * “O- blood low — restock soon.”
>
> ---
>
> *3. Notes for AI:*
>
> * Use React functional components, Tailwind CSS, and dummy JSON/state.
> * Keep the same design style as existing hospital dashboard.
> * Smooth transitions between tabs (optional).
> * Everything should run locally — no backend, no external API — to save credits.
> * Final output: single working React component that plugs into my Hospital section.
>
> ---
>
> ✅ *Goal:* A single connected *Hospital Section* with tabs for Emergency and Complete Analysis, AI-driven preparation logic, and working dummy data — all visually clean, responsive, and credit-efficient.

---

Would you like me to shorten this even more (to a one-paragraph “Replit Lite Prompt” that’s <400 characters, for absolute minimum credit use)?