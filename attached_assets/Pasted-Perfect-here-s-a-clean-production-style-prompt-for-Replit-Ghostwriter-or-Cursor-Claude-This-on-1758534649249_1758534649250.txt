Perfect ‚Äî here‚Äôs a clean, production-style prompt for Replit Ghostwriter (or Cursor/Claude).
This one allows external dependencies and multiple files (no single-file chaos), uses Vite + React, and implements real cross-tab notifications with BroadcastChannel + fallback, Web Notifications, and a tidy component structure.

Copy-paste this into the AI:

‚∏ª

Project Goal:
Create a small Vite + React app that simulates our AI4Health Emergency MVP with three roles: User, Ambulance, Hospital. All three run in the same web app as tabs. When the User triggers SOS, the Ambulance and Hospital tabs receive live alerts and browser notifications. Ambulance can progress status NEW ‚Üí ACK ‚Üí ENROUTE ‚Üí ARRIVED; Hospital can mark Prep Started. State changes must sync instantly across tabs via BroadcastChannel (with localStorage fallback).

Stack & Dependencies:
	‚Ä¢	Tooling: Vite + React + TypeScript
	‚Ä¢	State: Zustand (lightweight global store)
	‚Ä¢	Utilities: optional dayjs for time
	‚Ä¢	Styling: Tailwind CSS (or plain CSS modules if easier)
	‚Ä¢	Optional: qrcode (npm) for QR fallback; NFC is optional (Web NFC if time permits)

Scripts:
	‚Ä¢	npm create vite@latest ai4h -- --template react-ts
	‚Ä¢	cd ai4h && npm i zustand dayjs qrcode
	‚Ä¢	If using Tailwind: set up per docs (PostCSS config + tailwind.config.js, add base styles)

App Structure:

src/
  main.tsx
  App.tsx
  styles.css (or tailwind)
  store/state.ts            // Zustand store + BroadcastChannel sync
  utils/notify.ts           // Web Notifications + vibrate helper
  utils/time.ts             // formatIST(ts) using Asia/Kolkata
  utils/bus.ts              // broadcast + storage fallback helpers
  components/TabBar.tsx
  components/StatusChip.tsx
  components/Timeline.tsx
  views/UserView.tsx
  views/AmbulanceView.tsx
  views/HospitalView.tsx
  types.ts

Shared Demo Data (prefill in store):

export const demoPatient = {
  id: "PT-001",
  name: "Rahul Mehta",
  age: 24,
  blood: "O+",
  conditions: ["Asthma"],
  allergies: ["Penicillin"],
  guardian: { name: "Asha Mehta", phone: "+91-90000-00000" },
};

Global State Shape (ai4h_state in Zustand + localStorage):

type Status = "NEW" | "ACK" | "ENROUTE" | "ARRIVED" | null;

type HistoryItem = {
  ts: string;
  actor: "USER" | "AMBULANCE" | "HOSPITAL";
  type: "SOS_NEW" | "AMB_ACK" | "AMB_ENROUTE" | "AMB_ARRIVED" | "HOSP_PREP";
  note?: string;
};

type AI4HState = {
  status: Status;
  etaMin: number | null;
  patient: typeof demoPatient | null;
  geo?: { lat?: number; lon?: number; address?: string };
  history: HistoryItem[];
  lastEventTs?: string;
};

Cross-Tab Sync:
	‚Ä¢	Create BroadcastChannel('ai4h') in store/state.ts.
	‚Ä¢	On any state update, persist to localStorage.ai4h_state and postMessage on the channel.
	‚Ä¢	Add window storage event fallback (if BroadcastChannel unsupported).
	‚Ä¢	Each tab listens and re-hydrates state + re-renders.

Web Notifications (utils/notify.ts):
	‚Ä¢	safeNotify(title, body) ‚Üí request permission once, show notification for SOS or status changes; call navigator.vibrate?.(200) when available.

App Behavior by View:
	1.	UserView

	‚Ä¢	Show Emergency Profile card (from demoPatient) and a Location panel:
	‚Ä¢	Try navigator.geolocation.getCurrentPosition ‚Üí set geo.lat/lon (else manual address input).
	‚Ä¢	Big red ‚Äúüö® EMERGENCY SOS‚Äù button:
	‚Ä¢	Writes { type: "SOS_NEW", ts: nowISO, status:"NEW", etaMin:7, patient, geo } to store.
	‚Ä¢	Appends to history.
	‚Ä¢	Broadcasts + persists.
	‚Ä¢	Toast ‚ÄúEmergency Alert Sent‚Äù.
	‚Ä¢	Timeline: last 10 events (read from state).

	2.	AmbulanceView

	‚Ä¢	If status is null, show ‚ÄúWaiting for alerts‚Ä¶‚Äù
	‚Ä¢	On SOS_NEW:
	‚Ä¢	Show Incoming Emergency card: name, blood, conditions, guardian, location/ETA, StatusChip (NEW=red).
	‚Ä¢	Call safeNotify("NEW EMERGENCY", "Rahul (O+), Asthma").
	‚Ä¢	Action buttons:
	‚Ä¢	Acknowledge ‚Üí set status:"ACK", etaMin:6, push AMB_ACK.
	‚Ä¢	Start En-Route ‚Üí status:"ENROUTE", start a countdown (interval every 30s decrementing ETA; stop at 0), push AMB_ENROUTE.
	‚Ä¢	Mark Arrived ‚Üí status:"ARRIVED", push AMB_ARRIVED.
	‚Ä¢	Show a simple progress bar tied to ETA.
	‚Ä¢	Timeline below.

	3.	HospitalView

	‚Ä¢	On SOS: display Incoming Patient card with StatusChip & ETA.
	‚Ä¢	Prep Checklist: ER Bed, O+ Blood, Ventilator, Asthma Nebulizer (checkboxes; local UI state).
	‚Ä¢	Button ‚ÄúPrep Started‚Äù ‚Üí push HOSP_PREP to history; broadcast.
	‚Ä¢	‚ÄúToday‚Äôs Alerts‚Äù table (just list every SOS_NEW received with current status).
	‚Ä¢	Timeline below.

Tab Bar & Persistence:
	‚Ä¢	TabBar with three tabs. Persist last tab in localStorage.ai4h_lastTab.

Utilities:
	‚Ä¢	formatIST(ts) using toLocaleString("en-IN", { timeZone: "Asia/Kolkata" }).
	‚Ä¢	toast(msg) (simple React portal or inline div).

Styling:
	‚Ä¢	Tailwind recommended: large touch targets, rounded xl, subtle cards, status colors:
	‚Ä¢	NEW: red-600, ACK: amber-500, ENROUTE: sky-600, ARRIVED: green-600.

Acceptance Criteria (must pass):
	1.	Open app in 3 browser tabs, set each to User, Ambulance, Hospital.
	2.	Click SOS on User ‚Üí both other tabs instantly show alert + browser notification.
	3.	On Ambulance: Acknowledge ‚Üí Start En-Route (ETA ticks down) ‚Üí Mark Arrived; all tabs update status chips live.
	4.	On Hospital: click Prep Started ‚Üí appears in all timelines.
	5.	Refresh any tab ‚Üí state rehydrates from localStorage without breaking.

Nice-to-have (if time):
	‚Ä¢	QR fallback: generate a QR (using qrcode) for the SOS payload; a simple ‚ÄúPaste JSON‚Äù modal on Ambulance/Hospital to simulate scanning.
	‚Ä¢	Web NFC (optional): add buttons to write/read NDEF (Chrome Android) for bonus points.

Deliverables:
	‚Ä¢	Complete Vite project with the structure above.
	‚Ä¢	Clear README.md with run steps:
	‚Ä¢	npm i
	‚Ä¢	npm run dev
	‚Ä¢	Open http://localhost:5173 in 3 tabs and demo.

‚∏ª

If the AI starts drifting, remind it:
‚ÄúKeep three views in one app, use Zustand + BroadcastChannel for cross-tab sync, and implement Web Notifications on SOS & status changes.‚Äù

Want me to also add a Judge demo script (60‚Äì90s) as a README section for your team?